// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ge_ir.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ge_5fir_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ge_5fir_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ge_5fir_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ge_5fir_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ge_5fir_2eproto;
namespace ge {
namespace proto {
class AttrDef;
class AttrDefDefaultTypeInternal;
extern AttrDefDefaultTypeInternal _AttrDef_default_instance_;
class AttrDef_ListListFloat;
class AttrDef_ListListFloatDefaultTypeInternal;
extern AttrDef_ListListFloatDefaultTypeInternal _AttrDef_ListListFloat_default_instance_;
class AttrDef_ListListFloat_ListFloat;
class AttrDef_ListListFloat_ListFloatDefaultTypeInternal;
extern AttrDef_ListListFloat_ListFloatDefaultTypeInternal _AttrDef_ListListFloat_ListFloat_default_instance_;
class AttrDef_ListListInt;
class AttrDef_ListListIntDefaultTypeInternal;
extern AttrDef_ListListIntDefaultTypeInternal _AttrDef_ListListInt_default_instance_;
class AttrDef_ListListInt_ListInt;
class AttrDef_ListListInt_ListIntDefaultTypeInternal;
extern AttrDef_ListListInt_ListIntDefaultTypeInternal _AttrDef_ListListInt_ListInt_default_instance_;
class AttrDef_ListValue;
class AttrDef_ListValueDefaultTypeInternal;
extern AttrDef_ListValueDefaultTypeInternal _AttrDef_ListValue_default_instance_;
class GraphDef;
class GraphDefDefaultTypeInternal;
extern GraphDefDefaultTypeInternal _GraphDef_default_instance_;
class GraphDef_AttrEntry_DoNotUse;
class GraphDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern GraphDef_AttrEntry_DoNotUseDefaultTypeInternal _GraphDef_AttrEntry_DoNotUse_default_instance_;
class ModelDef;
class ModelDefDefaultTypeInternal;
extern ModelDefDefaultTypeInternal _ModelDef_default_instance_;
class ModelDef_AttrEntry_DoNotUse;
class ModelDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern ModelDef_AttrEntry_DoNotUseDefaultTypeInternal _ModelDef_AttrEntry_DoNotUse_default_instance_;
class NamedAttrs;
class NamedAttrsDefaultTypeInternal;
extern NamedAttrsDefaultTypeInternal _NamedAttrs_default_instance_;
class NamedAttrs_AttrEntry_DoNotUse;
class NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal;
extern NamedAttrs_AttrEntry_DoNotUseDefaultTypeInternal _NamedAttrs_AttrEntry_DoNotUse_default_instance_;
class OpDef;
class OpDefDefaultTypeInternal;
extern OpDefDefaultTypeInternal _OpDef_default_instance_;
class OpDef_AttrEntry_DoNotUse;
class OpDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern OpDef_AttrEntry_DoNotUseDefaultTypeInternal _OpDef_AttrEntry_DoNotUse_default_instance_;
class ShapeDef;
class ShapeDefDefaultTypeInternal;
extern ShapeDefDefaultTypeInternal _ShapeDef_default_instance_;
class TensorDef;
class TensorDefDefaultTypeInternal;
extern TensorDefDefaultTypeInternal _TensorDef_default_instance_;
class TensorDescriptor;
class TensorDescriptorDefaultTypeInternal;
extern TensorDescriptorDefaultTypeInternal _TensorDescriptor_default_instance_;
class TensorDescriptor_AttrEntry_DoNotUse;
class TensorDescriptor_AttrEntry_DoNotUseDefaultTypeInternal;
extern TensorDescriptor_AttrEntry_DoNotUseDefaultTypeInternal _TensorDescriptor_AttrEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace ge
PROTOBUF_NAMESPACE_OPEN
template<> ::ge::proto::AttrDef* Arena::CreateMaybeMessage<::ge::proto::AttrDef>(Arena*);
template<> ::ge::proto::AttrDef_ListListFloat* Arena::CreateMaybeMessage<::ge::proto::AttrDef_ListListFloat>(Arena*);
template<> ::ge::proto::AttrDef_ListListFloat_ListFloat* Arena::CreateMaybeMessage<::ge::proto::AttrDef_ListListFloat_ListFloat>(Arena*);
template<> ::ge::proto::AttrDef_ListListInt* Arena::CreateMaybeMessage<::ge::proto::AttrDef_ListListInt>(Arena*);
template<> ::ge::proto::AttrDef_ListListInt_ListInt* Arena::CreateMaybeMessage<::ge::proto::AttrDef_ListListInt_ListInt>(Arena*);
template<> ::ge::proto::AttrDef_ListValue* Arena::CreateMaybeMessage<::ge::proto::AttrDef_ListValue>(Arena*);
template<> ::ge::proto::GraphDef* Arena::CreateMaybeMessage<::ge::proto::GraphDef>(Arena*);
template<> ::ge::proto::GraphDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::proto::GraphDef_AttrEntry_DoNotUse>(Arena*);
template<> ::ge::proto::ModelDef* Arena::CreateMaybeMessage<::ge::proto::ModelDef>(Arena*);
template<> ::ge::proto::ModelDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::proto::ModelDef_AttrEntry_DoNotUse>(Arena*);
template<> ::ge::proto::NamedAttrs* Arena::CreateMaybeMessage<::ge::proto::NamedAttrs>(Arena*);
template<> ::ge::proto::NamedAttrs_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::proto::NamedAttrs_AttrEntry_DoNotUse>(Arena*);
template<> ::ge::proto::OpDef* Arena::CreateMaybeMessage<::ge::proto::OpDef>(Arena*);
template<> ::ge::proto::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::proto::OpDef_AttrEntry_DoNotUse>(Arena*);
template<> ::ge::proto::ShapeDef* Arena::CreateMaybeMessage<::ge::proto::ShapeDef>(Arena*);
template<> ::ge::proto::TensorDef* Arena::CreateMaybeMessage<::ge::proto::TensorDef>(Arena*);
template<> ::ge::proto::TensorDescriptor* Arena::CreateMaybeMessage<::ge::proto::TensorDescriptor>(Arena*);
template<> ::ge::proto::TensorDescriptor_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::ge::proto::TensorDescriptor_AttrEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ge {
namespace proto {

enum AttrDef_ListValue_ListValueType : int {
  AttrDef_ListValue_ListValueType_VT_LIST_NONE = 0,
  AttrDef_ListValue_ListValueType_VT_LIST_STRING = 1,
  AttrDef_ListValue_ListValueType_VT_LIST_INT = 2,
  AttrDef_ListValue_ListValueType_VT_LIST_FLOAT = 3,
  AttrDef_ListValue_ListValueType_VT_LIST_BOOL = 4,
  AttrDef_ListValue_ListValueType_VT_LIST_BYTES = 5,
  AttrDef_ListValue_ListValueType_VT_LIST_TENSOR_DESC = 6,
  AttrDef_ListValue_ListValueType_VT_LIST_TENSOR = 7,
  AttrDef_ListValue_ListValueType_VT_LIST_GRAPH = 8,
  AttrDef_ListValue_ListValueType_VT_LIST_NAMED_ATTRS = 9,
  AttrDef_ListValue_ListValueType_VT_LIST_DATA_TYPE = 10,
  AttrDef_ListValue_ListValueType_AttrDef_ListValue_ListValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AttrDef_ListValue_ListValueType_AttrDef_ListValue_ListValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AttrDef_ListValue_ListValueType_IsValid(int value);
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue_ListValueType_ListValueType_MIN = AttrDef_ListValue_ListValueType_VT_LIST_NONE;
constexpr AttrDef_ListValue_ListValueType AttrDef_ListValue_ListValueType_ListValueType_MAX = AttrDef_ListValue_ListValueType_VT_LIST_DATA_TYPE;
constexpr int AttrDef_ListValue_ListValueType_ListValueType_ARRAYSIZE = AttrDef_ListValue_ListValueType_ListValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttrDef_ListValue_ListValueType_descriptor();
template<typename T>
inline const std::string& AttrDef_ListValue_ListValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttrDef_ListValue_ListValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttrDef_ListValue_ListValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttrDef_ListValue_ListValueType_descriptor(), enum_t_value);
}
inline bool AttrDef_ListValue_ListValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttrDef_ListValue_ListValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttrDef_ListValue_ListValueType>(
    AttrDef_ListValue_ListValueType_descriptor(), name, value);
}
enum DataType : int {
  DT_UNDEFINED = 0,
  DT_FLOAT = 1,
  DT_FLOAT16 = 2,
  DT_INT8 = 3,
  DT_UINT8 = 4,
  DT_INT16 = 5,
  DT_UINT16 = 6,
  DT_INT32 = 7,
  DT_INT64 = 8,
  DT_UINT32 = 9,
  DT_UINT64 = 10,
  DT_BOOL = 11,
  DT_DOUBLE = 12,
  DT_STRING = 13,
  DT_DUAL_SUB_INT8 = 14,
  DT_DUAL_SUB_UINT8 = 15,
  DT_COMPLEX64 = 16,
  DT_COMPLEX128 = 17,
  DT_QINT8 = 18,
  DT_QINT16 = 19,
  DT_QINT32 = 20,
  DT_QUINT8 = 21,
  DT_QUINT16 = 22,
  DT_RESOURCE = 23,
  DT_STRING_REF = 24,
  DT_DUAL = 25,
  DT_VARIANT = 26,
  DT_BF16 = 27,
  DT_INT4 = 28,
  DT_UINT1 = 29,
  DT_INT2 = 30,
  DT_UINT2 = 31,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DT_UNDEFINED;
constexpr DataType DataType_MAX = DT_UINT2;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class AttrDef_ListValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef.ListValue) */ {
 public:
  inline AttrDef_ListValue() : AttrDef_ListValue(nullptr) {}
  virtual ~AttrDef_ListValue();

  AttrDef_ListValue(const AttrDef_ListValue& from);
  AttrDef_ListValue(AttrDef_ListValue&& from) noexcept
    : AttrDef_ListValue() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListValue& operator=(const AttrDef_ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListValue& operator=(AttrDef_ListValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListValue*>(
               &_AttrDef_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttrDef_ListValue& a, AttrDef_ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListValue* New() const final {
    return CreateMaybeMessage<AttrDef_ListValue>(nullptr);
  }

  AttrDef_ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListValue& from);
  void MergeFrom(const AttrDef_ListValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef.ListValue";
  }
  protected:
  explicit AttrDef_ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttrDef_ListValue_ListValueType ListValueType;
  static constexpr ListValueType VT_LIST_NONE =
    AttrDef_ListValue_ListValueType_VT_LIST_NONE;
  static constexpr ListValueType VT_LIST_STRING =
    AttrDef_ListValue_ListValueType_VT_LIST_STRING;
  static constexpr ListValueType VT_LIST_INT =
    AttrDef_ListValue_ListValueType_VT_LIST_INT;
  static constexpr ListValueType VT_LIST_FLOAT =
    AttrDef_ListValue_ListValueType_VT_LIST_FLOAT;
  static constexpr ListValueType VT_LIST_BOOL =
    AttrDef_ListValue_ListValueType_VT_LIST_BOOL;
  static constexpr ListValueType VT_LIST_BYTES =
    AttrDef_ListValue_ListValueType_VT_LIST_BYTES;
  static constexpr ListValueType VT_LIST_TENSOR_DESC =
    AttrDef_ListValue_ListValueType_VT_LIST_TENSOR_DESC;
  static constexpr ListValueType VT_LIST_TENSOR =
    AttrDef_ListValue_ListValueType_VT_LIST_TENSOR;
  static constexpr ListValueType VT_LIST_GRAPH =
    AttrDef_ListValue_ListValueType_VT_LIST_GRAPH;
  static constexpr ListValueType VT_LIST_NAMED_ATTRS =
    AttrDef_ListValue_ListValueType_VT_LIST_NAMED_ATTRS;
  static constexpr ListValueType VT_LIST_DATA_TYPE =
    AttrDef_ListValue_ListValueType_VT_LIST_DATA_TYPE;
  static inline bool ListValueType_IsValid(int value) {
    return AttrDef_ListValue_ListValueType_IsValid(value);
  }
  static constexpr ListValueType ListValueType_MIN =
    AttrDef_ListValue_ListValueType_ListValueType_MIN;
  static constexpr ListValueType ListValueType_MAX =
    AttrDef_ListValue_ListValueType_ListValueType_MAX;
  static constexpr int ListValueType_ARRAYSIZE =
    AttrDef_ListValue_ListValueType_ListValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ListValueType_descriptor() {
    return AttrDef_ListValue_ListValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ListValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ListValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ListValueType_Name.");
    return AttrDef_ListValue_ListValueType_Name(enum_t_value);
  }
  static inline bool ListValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ListValueType* value) {
    return AttrDef_ListValue_ListValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kBtFieldNumber = 7,
    kTdFieldNumber = 8,
    kTFieldNumber = 9,
    kGFieldNumber = 10,
    kNaFieldNumber = 11,
    kDtFieldNumber = 12,
    kValTypeFieldNumber = 20,
  };
  // repeated bytes s = 2;
  int s_size() const;
  private:
  int _internal_s_size() const;
  public:
  void clear_s();
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, size_t size);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_s();
  private:
  const std::string& _internal_s(int index) const;
  std::string* _internal_add_s();
  public:

  // repeated int64 i = 3;
  int i_size() const;
  private:
  int _internal_i_size() const;
  public:
  void clear_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_i() const;
  void _internal_add_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 i(int index) const;
  void set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_i();

  // repeated float f = 4;
  int f_size() const;
  private:
  int _internal_f_size() const;
  public:
  void clear_f();
  private:
  float _internal_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f() const;
  void _internal_add_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f();
  public:
  float f(int index) const;
  void set_f(int index, float value);
  void add_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f();

  // repeated bool b = 5;
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  private:
  bool _internal_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_b() const;
  void _internal_add_b(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_b();
  public:
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_b();

  // repeated bytes bt = 7;
  int bt_size() const;
  private:
  int _internal_bt_size() const;
  public:
  void clear_bt();
  const std::string& bt(int index) const;
  std::string* mutable_bt(int index);
  void set_bt(int index, const std::string& value);
  void set_bt(int index, std::string&& value);
  void set_bt(int index, const char* value);
  void set_bt(int index, const void* value, size_t size);
  std::string* add_bt();
  void add_bt(const std::string& value);
  void add_bt(std::string&& value);
  void add_bt(const char* value);
  void add_bt(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bt();
  private:
  const std::string& _internal_bt(int index) const;
  std::string* _internal_add_bt();
  public:

  // repeated .ge.proto.TensorDescriptor td = 8;
  int td_size() const;
  private:
  int _internal_td_size() const;
  public:
  void clear_td();
  ::ge::proto::TensorDescriptor* mutable_td(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
      mutable_td();
  private:
  const ::ge::proto::TensorDescriptor& _internal_td(int index) const;
  ::ge::proto::TensorDescriptor* _internal_add_td();
  public:
  const ::ge::proto::TensorDescriptor& td(int index) const;
  ::ge::proto::TensorDescriptor* add_td();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
      td() const;

  // repeated .ge.proto.TensorDef t = 9;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  ::ge::proto::TensorDef* mutable_t(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
      mutable_t();
  private:
  const ::ge::proto::TensorDef& _internal_t(int index) const;
  ::ge::proto::TensorDef* _internal_add_t();
  public:
  const ::ge::proto::TensorDef& t(int index) const;
  ::ge::proto::TensorDef* add_t();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
      t() const;

  // repeated .ge.proto.GraphDef g = 10;
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  ::ge::proto::GraphDef* mutable_g(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >*
      mutable_g();
  private:
  const ::ge::proto::GraphDef& _internal_g(int index) const;
  ::ge::proto::GraphDef* _internal_add_g();
  public:
  const ::ge::proto::GraphDef& g(int index) const;
  ::ge::proto::GraphDef* add_g();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >&
      g() const;

  // repeated .ge.proto.NamedAttrs na = 11;
  int na_size() const;
  private:
  int _internal_na_size() const;
  public:
  void clear_na();
  ::ge::proto::NamedAttrs* mutable_na(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::NamedAttrs >*
      mutable_na();
  private:
  const ::ge::proto::NamedAttrs& _internal_na(int index) const;
  ::ge::proto::NamedAttrs* _internal_add_na();
  public:
  const ::ge::proto::NamedAttrs& na(int index) const;
  ::ge::proto::NamedAttrs* add_na();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::NamedAttrs >&
      na() const;

  // repeated int64 dt = 12;
  int dt_size() const;
  private:
  int _internal_dt_size() const;
  public:
  void clear_dt();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dt(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dt() const;
  void _internal_add_dt(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dt();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dt(int index) const;
  void set_dt(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dt(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dt();

  // .ge.proto.AttrDef.ListValue.ListValueType val_type = 20;
  void clear_val_type();
  ::ge::proto::AttrDef_ListValue_ListValueType val_type() const;
  void set_val_type(::ge::proto::AttrDef_ListValue_ListValueType value);
  private:
  ::ge::proto::AttrDef_ListValue_ListValueType _internal_val_type() const;
  void _internal_set_val_type(::ge::proto::AttrDef_ListValue_ListValueType value);
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef.ListValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > i_;
  mutable std::atomic<int> _i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f_;
  mutable std::atomic<int> _f_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > b_;
  mutable std::atomic<int> _b_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor > td_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef > t_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef > g_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::NamedAttrs > na_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dt_;
  mutable std::atomic<int> _dt_cached_byte_size_;
  int val_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttrDef_ListListInt_ListInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef.ListListInt.ListInt) */ {
 public:
  inline AttrDef_ListListInt_ListInt() : AttrDef_ListListInt_ListInt(nullptr) {}
  virtual ~AttrDef_ListListInt_ListInt();

  AttrDef_ListListInt_ListInt(const AttrDef_ListListInt_ListInt& from);
  AttrDef_ListListInt_ListInt(AttrDef_ListListInt_ListInt&& from) noexcept
    : AttrDef_ListListInt_ListInt() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListListInt_ListInt& operator=(const AttrDef_ListListInt_ListInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListListInt_ListInt& operator=(AttrDef_ListListInt_ListInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListListInt_ListInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListListInt_ListInt* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListListInt_ListInt*>(
               &_AttrDef_ListListInt_ListInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttrDef_ListListInt_ListInt& a, AttrDef_ListListInt_ListInt& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListListInt_ListInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListListInt_ListInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListListInt_ListInt* New() const final {
    return CreateMaybeMessage<AttrDef_ListListInt_ListInt>(nullptr);
  }

  AttrDef_ListListInt_ListInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListListInt_ListInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListListInt_ListInt& from);
  void MergeFrom(const AttrDef_ListListInt_ListInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListListInt_ListInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef.ListListInt.ListInt";
  }
  protected:
  explicit AttrDef_ListListInt_ListInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListIFieldNumber = 1,
  };
  // repeated int64 list_i = 1;
  int list_i_size() const;
  private:
  int _internal_list_i_size() const;
  public:
  void clear_list_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_list_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_list_i() const;
  void _internal_add_list_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_list_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 list_i(int index) const;
  void set_list_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_list_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      list_i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_list_i();

  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef.ListListInt.ListInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > list_i_;
  mutable std::atomic<int> _list_i_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttrDef_ListListInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef.ListListInt) */ {
 public:
  inline AttrDef_ListListInt() : AttrDef_ListListInt(nullptr) {}
  virtual ~AttrDef_ListListInt();

  AttrDef_ListListInt(const AttrDef_ListListInt& from);
  AttrDef_ListListInt(AttrDef_ListListInt&& from) noexcept
    : AttrDef_ListListInt() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListListInt& operator=(const AttrDef_ListListInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListListInt& operator=(AttrDef_ListListInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListListInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListListInt* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListListInt*>(
               &_AttrDef_ListListInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttrDef_ListListInt& a, AttrDef_ListListInt& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListListInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListListInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListListInt* New() const final {
    return CreateMaybeMessage<AttrDef_ListListInt>(nullptr);
  }

  AttrDef_ListListInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListListInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListListInt& from);
  void MergeFrom(const AttrDef_ListListInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListListInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef.ListListInt";
  }
  protected:
  explicit AttrDef_ListListInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttrDef_ListListInt_ListInt ListInt;

  // accessors -------------------------------------------------------

  enum : int {
    kListListIFieldNumber = 1,
  };
  // repeated .ge.proto.AttrDef.ListListInt.ListInt list_list_i = 1;
  int list_list_i_size() const;
  private:
  int _internal_list_list_i_size() const;
  public:
  void clear_list_list_i();
  ::ge::proto::AttrDef_ListListInt_ListInt* mutable_list_list_i(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListInt_ListInt >*
      mutable_list_list_i();
  private:
  const ::ge::proto::AttrDef_ListListInt_ListInt& _internal_list_list_i(int index) const;
  ::ge::proto::AttrDef_ListListInt_ListInt* _internal_add_list_list_i();
  public:
  const ::ge::proto::AttrDef_ListListInt_ListInt& list_list_i(int index) const;
  ::ge::proto::AttrDef_ListListInt_ListInt* add_list_list_i();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListInt_ListInt >&
      list_list_i() const;

  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef.ListListInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListInt_ListInt > list_list_i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttrDef_ListListFloat_ListFloat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef.ListListFloat.ListFloat) */ {
 public:
  inline AttrDef_ListListFloat_ListFloat() : AttrDef_ListListFloat_ListFloat(nullptr) {}
  virtual ~AttrDef_ListListFloat_ListFloat();

  AttrDef_ListListFloat_ListFloat(const AttrDef_ListListFloat_ListFloat& from);
  AttrDef_ListListFloat_ListFloat(AttrDef_ListListFloat_ListFloat&& from) noexcept
    : AttrDef_ListListFloat_ListFloat() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListListFloat_ListFloat& operator=(const AttrDef_ListListFloat_ListFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListListFloat_ListFloat& operator=(AttrDef_ListListFloat_ListFloat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListListFloat_ListFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListListFloat_ListFloat* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListListFloat_ListFloat*>(
               &_AttrDef_ListListFloat_ListFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AttrDef_ListListFloat_ListFloat& a, AttrDef_ListListFloat_ListFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListListFloat_ListFloat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListListFloat_ListFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListListFloat_ListFloat* New() const final {
    return CreateMaybeMessage<AttrDef_ListListFloat_ListFloat>(nullptr);
  }

  AttrDef_ListListFloat_ListFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListListFloat_ListFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListListFloat_ListFloat& from);
  void MergeFrom(const AttrDef_ListListFloat_ListFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListListFloat_ListFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef.ListListFloat.ListFloat";
  }
  protected:
  explicit AttrDef_ListListFloat_ListFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFFieldNumber = 1,
  };
  // repeated float list_f = 1;
  int list_f_size() const;
  private:
  int _internal_list_f_size() const;
  public:
  void clear_list_f();
  private:
  float _internal_list_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_list_f() const;
  void _internal_add_list_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_list_f();
  public:
  float list_f(int index) const;
  void set_list_f(int index, float value);
  void add_list_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      list_f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_list_f();

  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef.ListListFloat.ListFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > list_f_;
  mutable std::atomic<int> _list_f_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttrDef_ListListFloat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef.ListListFloat) */ {
 public:
  inline AttrDef_ListListFloat() : AttrDef_ListListFloat(nullptr) {}
  virtual ~AttrDef_ListListFloat();

  AttrDef_ListListFloat(const AttrDef_ListListFloat& from);
  AttrDef_ListListFloat(AttrDef_ListListFloat&& from) noexcept
    : AttrDef_ListListFloat() {
    *this = ::std::move(from);
  }

  inline AttrDef_ListListFloat& operator=(const AttrDef_ListListFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef_ListListFloat& operator=(AttrDef_ListListFloat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef_ListListFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef_ListListFloat* internal_default_instance() {
    return reinterpret_cast<const AttrDef_ListListFloat*>(
               &_AttrDef_ListListFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AttrDef_ListListFloat& a, AttrDef_ListListFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef_ListListFloat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef_ListListFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef_ListListFloat* New() const final {
    return CreateMaybeMessage<AttrDef_ListListFloat>(nullptr);
  }

  AttrDef_ListListFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef_ListListFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef_ListListFloat& from);
  void MergeFrom(const AttrDef_ListListFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef_ListListFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef.ListListFloat";
  }
  protected:
  explicit AttrDef_ListListFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttrDef_ListListFloat_ListFloat ListFloat;

  // accessors -------------------------------------------------------

  enum : int {
    kListListFFieldNumber = 1,
  };
  // repeated .ge.proto.AttrDef.ListListFloat.ListFloat list_list_f = 1;
  int list_list_f_size() const;
  private:
  int _internal_list_list_f_size() const;
  public:
  void clear_list_list_f();
  ::ge::proto::AttrDef_ListListFloat_ListFloat* mutable_list_list_f(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListFloat_ListFloat >*
      mutable_list_list_f();
  private:
  const ::ge::proto::AttrDef_ListListFloat_ListFloat& _internal_list_list_f(int index) const;
  ::ge::proto::AttrDef_ListListFloat_ListFloat* _internal_add_list_list_f();
  public:
  const ::ge::proto::AttrDef_ListListFloat_ListFloat& list_list_f(int index) const;
  ::ge::proto::AttrDef_ListListFloat_ListFloat* add_list_list_f();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListFloat_ListFloat >&
      list_list_f() const;

  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef.ListListFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListFloat_ListFloat > list_list_f_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttrDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.AttrDef) */ {
 public:
  inline AttrDef() : AttrDef(nullptr) {}
  virtual ~AttrDef();

  AttrDef(const AttrDef& from);
  AttrDef(AttrDef&& from) noexcept
    : AttrDef() {
    *this = ::std::move(from);
  }

  inline AttrDef& operator=(const AttrDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrDef& operator=(AttrDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttrDef& default_instance();

  enum ValueCase {
    kS = 2,
    kI = 3,
    kF = 4,
    kB = 5,
    kBt = 7,
    kList = 1,
    kFunc = 10,
    kTd = 11,
    kT = 12,
    kG = 13,
    kListListInt = 14,
    kDt = 15,
    kListListFloat = 16,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttrDef* internal_default_instance() {
    return reinterpret_cast<const AttrDef*>(
               &_AttrDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AttrDef& a, AttrDef& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttrDef* New() const final {
    return CreateMaybeMessage<AttrDef>(nullptr);
  }

  AttrDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttrDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttrDef& from);
  void MergeFrom(const AttrDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.AttrDef";
  }
  protected:
  explicit AttrDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttrDef_ListValue ListValue;
  typedef AttrDef_ListListInt ListListInt;
  typedef AttrDef_ListListFloat ListListFloat;

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kBtFieldNumber = 7,
    kListFieldNumber = 1,
    kFuncFieldNumber = 10,
    kTdFieldNumber = 11,
    kTFieldNumber = 12,
    kGFieldNumber = 13,
    kListListIntFieldNumber = 14,
    kDtFieldNumber = 15,
    kListListFloatFieldNumber = 16,
  };
  // bytes s = 2;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // int64 i = 3;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float f = 4;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // bool b = 5;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // bytes bt = 7;
  private:
  bool _internal_has_bt() const;
  public:
  void clear_bt();
  const std::string& bt() const;
  void set_bt(const std::string& value);
  void set_bt(std::string&& value);
  void set_bt(const char* value);
  void set_bt(const void* value, size_t size);
  std::string* mutable_bt();
  std::string* release_bt();
  void set_allocated_bt(std::string* bt);
  private:
  const std::string& _internal_bt() const;
  void _internal_set_bt(const std::string& value);
  std::string* _internal_mutable_bt();
  public:

  // .ge.proto.AttrDef.ListValue list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::ge::proto::AttrDef_ListValue& list() const;
  ::ge::proto::AttrDef_ListValue* release_list();
  ::ge::proto::AttrDef_ListValue* mutable_list();
  void set_allocated_list(::ge::proto::AttrDef_ListValue* list);
  private:
  const ::ge::proto::AttrDef_ListValue& _internal_list() const;
  ::ge::proto::AttrDef_ListValue* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::ge::proto::AttrDef_ListValue* list);
  ::ge::proto::AttrDef_ListValue* unsafe_arena_release_list();

  // .ge.proto.NamedAttrs func = 10;
  bool has_func() const;
  private:
  bool _internal_has_func() const;
  public:
  void clear_func();
  const ::ge::proto::NamedAttrs& func() const;
  ::ge::proto::NamedAttrs* release_func();
  ::ge::proto::NamedAttrs* mutable_func();
  void set_allocated_func(::ge::proto::NamedAttrs* func);
  private:
  const ::ge::proto::NamedAttrs& _internal_func() const;
  ::ge::proto::NamedAttrs* _internal_mutable_func();
  public:
  void unsafe_arena_set_allocated_func(
      ::ge::proto::NamedAttrs* func);
  ::ge::proto::NamedAttrs* unsafe_arena_release_func();

  // .ge.proto.TensorDescriptor td = 11;
  bool has_td() const;
  private:
  bool _internal_has_td() const;
  public:
  void clear_td();
  const ::ge::proto::TensorDescriptor& td() const;
  ::ge::proto::TensorDescriptor* release_td();
  ::ge::proto::TensorDescriptor* mutable_td();
  void set_allocated_td(::ge::proto::TensorDescriptor* td);
  private:
  const ::ge::proto::TensorDescriptor& _internal_td() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_td();
  public:
  void unsafe_arena_set_allocated_td(
      ::ge::proto::TensorDescriptor* td);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_td();

  // .ge.proto.TensorDef t = 12;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::ge::proto::TensorDef& t() const;
  ::ge::proto::TensorDef* release_t();
  ::ge::proto::TensorDef* mutable_t();
  void set_allocated_t(::ge::proto::TensorDef* t);
  private:
  const ::ge::proto::TensorDef& _internal_t() const;
  ::ge::proto::TensorDef* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::ge::proto::TensorDef* t);
  ::ge::proto::TensorDef* unsafe_arena_release_t();

  // .ge.proto.GraphDef g = 13;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  const ::ge::proto::GraphDef& g() const;
  ::ge::proto::GraphDef* release_g();
  ::ge::proto::GraphDef* mutable_g();
  void set_allocated_g(::ge::proto::GraphDef* g);
  private:
  const ::ge::proto::GraphDef& _internal_g() const;
  ::ge::proto::GraphDef* _internal_mutable_g();
  public:
  void unsafe_arena_set_allocated_g(
      ::ge::proto::GraphDef* g);
  ::ge::proto::GraphDef* unsafe_arena_release_g();

  // .ge.proto.AttrDef.ListListInt list_list_int = 14;
  bool has_list_list_int() const;
  private:
  bool _internal_has_list_list_int() const;
  public:
  void clear_list_list_int();
  const ::ge::proto::AttrDef_ListListInt& list_list_int() const;
  ::ge::proto::AttrDef_ListListInt* release_list_list_int();
  ::ge::proto::AttrDef_ListListInt* mutable_list_list_int();
  void set_allocated_list_list_int(::ge::proto::AttrDef_ListListInt* list_list_int);
  private:
  const ::ge::proto::AttrDef_ListListInt& _internal_list_list_int() const;
  ::ge::proto::AttrDef_ListListInt* _internal_mutable_list_list_int();
  public:
  void unsafe_arena_set_allocated_list_list_int(
      ::ge::proto::AttrDef_ListListInt* list_list_int);
  ::ge::proto::AttrDef_ListListInt* unsafe_arena_release_list_list_int();

  // int64 dt = 15;
  private:
  bool _internal_has_dt() const;
  public:
  void clear_dt();
  ::PROTOBUF_NAMESPACE_ID::int64 dt() const;
  void set_dt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dt() const;
  void _internal_set_dt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ge.proto.AttrDef.ListListFloat list_list_float = 16;
  bool has_list_list_float() const;
  private:
  bool _internal_has_list_list_float() const;
  public:
  void clear_list_list_float();
  const ::ge::proto::AttrDef_ListListFloat& list_list_float() const;
  ::ge::proto::AttrDef_ListListFloat* release_list_list_float();
  ::ge::proto::AttrDef_ListListFloat* mutable_list_list_float();
  void set_allocated_list_list_float(::ge::proto::AttrDef_ListListFloat* list_list_float);
  private:
  const ::ge::proto::AttrDef_ListListFloat& _internal_list_list_float() const;
  ::ge::proto::AttrDef_ListListFloat* _internal_mutable_list_list_float();
  public:
  void unsafe_arena_set_allocated_list_list_float(
      ::ge::proto::AttrDef_ListListFloat* list_list_float);
  ::ge::proto::AttrDef_ListListFloat* unsafe_arena_release_list_list_float();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ge.proto.AttrDef)
 private:
  class _Internal;
  void set_has_s();
  void set_has_i();
  void set_has_f();
  void set_has_b();
  void set_has_bt();
  void set_has_list();
  void set_has_func();
  void set_has_td();
  void set_has_t();
  void set_has_g();
  void set_has_list_list_int();
  void set_has_dt();
  void set_has_list_list_float();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::int64 i_;
    float f_;
    bool b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bt_;
    ::ge::proto::AttrDef_ListValue* list_;
    ::ge::proto::NamedAttrs* func_;
    ::ge::proto::TensorDescriptor* td_;
    ::ge::proto::TensorDef* t_;
    ::ge::proto::GraphDef* g_;
    ::ge::proto::AttrDef_ListListInt* list_list_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 dt_;
    ::ge::proto::AttrDef_ListListFloat* list_list_float_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class NamedAttrs_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NamedAttrs_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NamedAttrs_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NamedAttrs_AttrEntry_DoNotUse();
  explicit NamedAttrs_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NamedAttrs_AttrEntry_DoNotUse& other);
  static const NamedAttrs_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NamedAttrs_AttrEntry_DoNotUse*>(&_NamedAttrs_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.proto.NamedAttrs.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class NamedAttrs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.NamedAttrs) */ {
 public:
  inline NamedAttrs() : NamedAttrs(nullptr) {}
  virtual ~NamedAttrs();

  NamedAttrs(const NamedAttrs& from);
  NamedAttrs(NamedAttrs&& from) noexcept
    : NamedAttrs() {
    *this = ::std::move(from);
  }

  inline NamedAttrs& operator=(const NamedAttrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedAttrs& operator=(NamedAttrs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedAttrs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedAttrs* internal_default_instance() {
    return reinterpret_cast<const NamedAttrs*>(
               &_NamedAttrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NamedAttrs& a, NamedAttrs& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedAttrs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedAttrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedAttrs* New() const final {
    return CreateMaybeMessage<NamedAttrs>(nullptr);
  }

  NamedAttrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedAttrs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedAttrs& from);
  void MergeFrom(const NamedAttrs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedAttrs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.NamedAttrs";
  }
  protected:
  explicit NamedAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .ge.proto.AttrDef> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.NamedAttrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NamedAttrs_AttrEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class ShapeDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.ShapeDef) */ {
 public:
  inline ShapeDef() : ShapeDef(nullptr) {}
  virtual ~ShapeDef();

  ShapeDef(const ShapeDef& from);
  ShapeDef(ShapeDef&& from) noexcept
    : ShapeDef() {
    *this = ::std::move(from);
  }

  inline ShapeDef& operator=(const ShapeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeDef& operator=(ShapeDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShapeDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeDef* internal_default_instance() {
    return reinterpret_cast<const ShapeDef*>(
               &_ShapeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ShapeDef& a, ShapeDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeDef* New() const final {
    return CreateMaybeMessage<ShapeDef>(nullptr);
  }

  ShapeDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeDef& from);
  void MergeFrom(const ShapeDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.ShapeDef";
  }
  protected:
  explicit ShapeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated int64 dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:ge.proto.ShapeDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class TensorDescriptor_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TensorDescriptor_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TensorDescriptor_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TensorDescriptor_AttrEntry_DoNotUse();
  explicit TensorDescriptor_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TensorDescriptor_AttrEntry_DoNotUse& other);
  static const TensorDescriptor_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TensorDescriptor_AttrEntry_DoNotUse*>(&_TensorDescriptor_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.proto.TensorDescriptor.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class TensorDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.TensorDescriptor) */ {
 public:
  inline TensorDescriptor() : TensorDescriptor(nullptr) {}
  virtual ~TensorDescriptor();

  TensorDescriptor(const TensorDescriptor& from);
  TensorDescriptor(TensorDescriptor&& from) noexcept
    : TensorDescriptor() {
    *this = ::std::move(from);
  }

  inline TensorDescriptor& operator=(const TensorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorDescriptor& operator=(TensorDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorDescriptor* internal_default_instance() {
    return reinterpret_cast<const TensorDescriptor*>(
               &_TensorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TensorDescriptor& a, TensorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorDescriptor* New() const final {
    return CreateMaybeMessage<TensorDescriptor>(nullptr);
  }

  TensorDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorDescriptor& from);
  void MergeFrom(const TensorDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.TensorDescriptor";
  }
  protected:
  explicit TensorDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 5,
    kNameFieldNumber = 1,
    kLayoutFieldNumber = 4,
    kDeviceTypeFieldNumber = 14,
    kCmpsTabFieldNumber = 20,
    kShapeFieldNumber = 3,
    kSizeFieldNumber = 10,
    kDtypeFieldNumber = 2,
    kHasOutAttrFieldNumber = 9,
    kReuseInputFieldNumber = 12,
    kOutputTensorFieldNumber = 13,
    kInputTensorFieldNumber = 15,
    kWeightSizeFieldNumber = 11,
    kRealDimCntFieldNumber = 16,
    kReuseInputIndexFieldNumber = 17,
    kDataOffsetFieldNumber = 18,
    kCmpsSizeFieldNumber = 19,
    kCmpsTabOffsetFieldNumber = 21,
  };
  // map<string, .ge.proto.AttrDef> attr = 5;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string layout = 4;
  void clear_layout();
  const std::string& layout() const;
  void set_layout(const std::string& value);
  void set_layout(std::string&& value);
  void set_layout(const char* value);
  void set_layout(const char* value, size_t size);
  std::string* mutable_layout();
  std::string* release_layout();
  void set_allocated_layout(std::string* layout);
  private:
  const std::string& _internal_layout() const;
  void _internal_set_layout(const std::string& value);
  std::string* _internal_mutable_layout();
  public:

  // string device_type = 14;
  void clear_device_type();
  const std::string& device_type() const;
  void set_device_type(const std::string& value);
  void set_device_type(std::string&& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string cmps_tab = 20;
  void clear_cmps_tab();
  const std::string& cmps_tab() const;
  void set_cmps_tab(const std::string& value);
  void set_cmps_tab(std::string&& value);
  void set_cmps_tab(const char* value);
  void set_cmps_tab(const char* value, size_t size);
  std::string* mutable_cmps_tab();
  std::string* release_cmps_tab();
  void set_allocated_cmps_tab(std::string* cmps_tab);
  private:
  const std::string& _internal_cmps_tab() const;
  void _internal_set_cmps_tab(const std::string& value);
  std::string* _internal_mutable_cmps_tab();
  public:

  // .ge.proto.ShapeDef shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::ge::proto::ShapeDef& shape() const;
  ::ge::proto::ShapeDef* release_shape();
  ::ge::proto::ShapeDef* mutable_shape();
  void set_allocated_shape(::ge::proto::ShapeDef* shape);
  private:
  const ::ge::proto::ShapeDef& _internal_shape() const;
  ::ge::proto::ShapeDef* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::ge::proto::ShapeDef* shape);
  ::ge::proto::ShapeDef* unsafe_arena_release_shape();

  // int64 size = 10;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ge.proto.DataType dtype = 2;
  void clear_dtype();
  ::ge::proto::DataType dtype() const;
  void set_dtype(::ge::proto::DataType value);
  private:
  ::ge::proto::DataType _internal_dtype() const;
  void _internal_set_dtype(::ge::proto::DataType value);
  public:

  // bool has_out_attr = 9;
  void clear_has_out_attr();
  bool has_out_attr() const;
  void set_has_out_attr(bool value);
  private:
  bool _internal_has_out_attr() const;
  void _internal_set_has_out_attr(bool value);
  public:

  // bool reuse_input = 12;
  void clear_reuse_input();
  bool reuse_input() const;
  void set_reuse_input(bool value);
  private:
  bool _internal_reuse_input() const;
  void _internal_set_reuse_input(bool value);
  public:

  // bool output_tensor = 13;
  void clear_output_tensor();
  bool output_tensor() const;
  void set_output_tensor(bool value);
  private:
  bool _internal_output_tensor() const;
  void _internal_set_output_tensor(bool value);
  public:

  // bool input_tensor = 15;
  void clear_input_tensor();
  bool input_tensor() const;
  void set_input_tensor(bool value);
  private:
  bool _internal_input_tensor() const;
  void _internal_set_input_tensor(bool value);
  public:

  // int64 weight_size = 11;
  void clear_weight_size();
  ::PROTOBUF_NAMESPACE_ID::int64 weight_size() const;
  void set_weight_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_weight_size() const;
  void _internal_set_weight_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 real_dim_cnt = 16;
  void clear_real_dim_cnt();
  ::PROTOBUF_NAMESPACE_ID::int64 real_dim_cnt() const;
  void set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_real_dim_cnt() const;
  void _internal_set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 reuse_input_index = 17;
  void clear_reuse_input_index();
  ::PROTOBUF_NAMESPACE_ID::int64 reuse_input_index() const;
  void set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reuse_input_index() const;
  void _internal_set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 data_offset = 18;
  void clear_data_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 data_offset() const;
  void set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_offset() const;
  void _internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cmps_size = 19;
  void clear_cmps_size();
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_size() const;
  void set_cmps_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cmps_size() const;
  void _internal_set_cmps_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cmps_tab_offset = 21;
  void clear_cmps_tab_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_tab_offset() const;
  void set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cmps_tab_offset() const;
  void _internal_set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.TensorDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TensorDescriptor_AttrEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmps_tab_;
  ::ge::proto::ShapeDef* shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  int dtype_;
  bool has_out_attr_;
  bool reuse_input_;
  bool output_tensor_;
  bool input_tensor_;
  ::PROTOBUF_NAMESPACE_ID::int64 weight_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 real_dim_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int64 reuse_input_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cmps_tab_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class TensorDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.TensorDef) */ {
 public:
  inline TensorDef() : TensorDef(nullptr) {}
  virtual ~TensorDef();

  TensorDef(const TensorDef& from);
  TensorDef(TensorDef&& from) noexcept
    : TensorDef() {
    *this = ::std::move(from);
  }

  inline TensorDef& operator=(const TensorDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorDef& operator=(TensorDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorDef* internal_default_instance() {
    return reinterpret_cast<const TensorDef*>(
               &_TensorDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TensorDef& a, TensorDef& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorDef* New() const final {
    return CreateMaybeMessage<TensorDef>(nullptr);
  }

  TensorDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorDef& from);
  void MergeFrom(const TensorDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.TensorDef";
  }
  protected:
  explicit TensorDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ge.proto.TensorDescriptor desc = 1;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::ge::proto::TensorDescriptor& desc() const;
  ::ge::proto::TensorDescriptor* release_desc();
  ::ge::proto::TensorDescriptor* mutable_desc();
  void set_allocated_desc(::ge::proto::TensorDescriptor* desc);
  private:
  const ::ge::proto::TensorDescriptor& _internal_desc() const;
  ::ge::proto::TensorDescriptor* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::ge::proto::TensorDescriptor* desc);
  ::ge::proto::TensorDescriptor* unsafe_arena_release_desc();

  // @@protoc_insertion_point(class_scope:ge.proto.TensorDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::ge::proto::TensorDescriptor* desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class OpDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  OpDef_AttrEntry_DoNotUse();
  explicit OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpDef_AttrEntry_DoNotUse& other);
  static const OpDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpDef_AttrEntry_DoNotUse*>(&_OpDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.proto.OpDef.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class OpDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.OpDef) */ {
 public:
  inline OpDef() : OpDef(nullptr) {}
  virtual ~OpDef();

  OpDef(const OpDef& from);
  OpDef(OpDef&& from) noexcept
    : OpDef() {
    *this = ::std::move(from);
  }

  inline OpDef& operator=(const OpDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef& operator=(OpDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OpDef& a, OpDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDef* New() const final {
    return CreateMaybeMessage<OpDef>(nullptr);
  }

  OpDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDef& from);
  void MergeFrom(const OpDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.OpDef";
  }
  protected:
  explicit OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 5,
    kAttrFieldNumber = 10,
    kInputNameFieldNumber = 23,
    kSrcNameFieldNumber = 24,
    kSrcIndexFieldNumber = 25,
    kDstNameFieldNumber = 26,
    kDstIndexFieldNumber = 27,
    kInputIFieldNumber = 28,
    kOutputIFieldNumber = 29,
    kWorkspaceFieldNumber = 30,
    kWorkspaceBytesFieldNumber = 31,
    kIsInputConstFieldNumber = 32,
    kInputDescFieldNumber = 33,
    kOutputDescFieldNumber = 34,
    kSubgraphNameFieldNumber = 35,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 21,
    kHasOutAttrFieldNumber = 20,
    kStreamIdFieldNumber = 22,
  };
  // repeated string input = 5;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // map<string, .ge.proto.AttrDef> attr = 10;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attr();

  // repeated string input_name = 23;
  int input_name_size() const;
  private:
  int _internal_input_name_size() const;
  public:
  void clear_input_name();
  const std::string& input_name(int index) const;
  std::string* mutable_input_name(int index);
  void set_input_name(int index, const std::string& value);
  void set_input_name(int index, std::string&& value);
  void set_input_name(int index, const char* value);
  void set_input_name(int index, const char* value, size_t size);
  std::string* add_input_name();
  void add_input_name(const std::string& value);
  void add_input_name(std::string&& value);
  void add_input_name(const char* value);
  void add_input_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_name();
  private:
  const std::string& _internal_input_name(int index) const;
  std::string* _internal_add_input_name();
  public:

  // repeated string src_name = 24;
  int src_name_size() const;
  private:
  int _internal_src_name_size() const;
  public:
  void clear_src_name();
  const std::string& src_name(int index) const;
  std::string* mutable_src_name(int index);
  void set_src_name(int index, const std::string& value);
  void set_src_name(int index, std::string&& value);
  void set_src_name(int index, const char* value);
  void set_src_name(int index, const char* value, size_t size);
  std::string* add_src_name();
  void add_src_name(const std::string& value);
  void add_src_name(std::string&& value);
  void add_src_name(const char* value);
  void add_src_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& src_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_src_name();
  private:
  const std::string& _internal_src_name(int index) const;
  std::string* _internal_add_src_name();
  public:

  // repeated int64 src_index = 25;
  int src_index_size() const;
  private:
  int _internal_src_index_size() const;
  public:
  void clear_src_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_src_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_src_index() const;
  void _internal_add_src_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_src_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 src_index(int index) const;
  void set_src_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_src_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      src_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_src_index();

  // repeated string dst_name = 26;
  int dst_name_size() const;
  private:
  int _internal_dst_name_size() const;
  public:
  void clear_dst_name();
  const std::string& dst_name(int index) const;
  std::string* mutable_dst_name(int index);
  void set_dst_name(int index, const std::string& value);
  void set_dst_name(int index, std::string&& value);
  void set_dst_name(int index, const char* value);
  void set_dst_name(int index, const char* value, size_t size);
  std::string* add_dst_name();
  void add_dst_name(const std::string& value);
  void add_dst_name(std::string&& value);
  void add_dst_name(const char* value);
  void add_dst_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dst_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dst_name();
  private:
  const std::string& _internal_dst_name(int index) const;
  std::string* _internal_add_dst_name();
  public:

  // repeated int64 dst_index = 27;
  int dst_index_size() const;
  private:
  int _internal_dst_index_size() const;
  public:
  void clear_dst_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dst_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dst_index() const;
  void _internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dst_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dst_index(int index) const;
  void set_dst_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dst_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dst_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dst_index();

  // repeated int64 input_i = 28;
  int input_i_size() const;
  private:
  int _internal_input_i_size() const;
  public:
  void clear_input_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_input_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_input_i() const;
  void _internal_add_input_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_input_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 input_i(int index) const;
  void set_input_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_input_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      input_i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_input_i();

  // repeated int64 output_i = 29;
  int output_i_size() const;
  private:
  int _internal_output_i_size() const;
  public:
  void clear_output_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_output_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_output_i() const;
  void _internal_add_output_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_output_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 output_i(int index) const;
  void set_output_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_output_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      output_i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_output_i();

  // repeated int64 workspace = 30;
  int workspace_size() const;
  private:
  int _internal_workspace_size() const;
  public:
  void clear_workspace();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_workspace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_workspace() const;
  void _internal_add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_workspace();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 workspace(int index) const;
  void set_workspace(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      workspace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_workspace();

  // repeated int64 workspace_bytes = 31;
  int workspace_bytes_size() const;
  private:
  int _internal_workspace_bytes_size() const;
  public:
  void clear_workspace_bytes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_workspace_bytes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_workspace_bytes() const;
  void _internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_workspace_bytes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 workspace_bytes(int index) const;
  void set_workspace_bytes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      workspace_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_workspace_bytes();

  // repeated bool is_input_const = 32;
  int is_input_const_size() const;
  private:
  int _internal_is_input_const_size() const;
  public:
  void clear_is_input_const();
  private:
  bool _internal_is_input_const(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_input_const() const;
  void _internal_add_is_input_const(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_input_const();
  public:
  bool is_input_const(int index) const;
  void set_is_input_const(int index, bool value);
  void add_is_input_const(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_input_const() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_input_const();

  // repeated .ge.proto.TensorDescriptor input_desc = 33;
  int input_desc_size() const;
  private:
  int _internal_input_desc_size() const;
  public:
  void clear_input_desc();
  ::ge::proto::TensorDescriptor* mutable_input_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
      mutable_input_desc();
  private:
  const ::ge::proto::TensorDescriptor& _internal_input_desc(int index) const;
  ::ge::proto::TensorDescriptor* _internal_add_input_desc();
  public:
  const ::ge::proto::TensorDescriptor& input_desc(int index) const;
  ::ge::proto::TensorDescriptor* add_input_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
      input_desc() const;

  // repeated .ge.proto.TensorDescriptor output_desc = 34;
  int output_desc_size() const;
  private:
  int _internal_output_desc_size() const;
  public:
  void clear_output_desc();
  ::ge::proto::TensorDescriptor* mutable_output_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
      mutable_output_desc();
  private:
  const ::ge::proto::TensorDescriptor& _internal_output_desc(int index) const;
  ::ge::proto::TensorDescriptor* _internal_add_output_desc();
  public:
  const ::ge::proto::TensorDescriptor& output_desc(int index) const;
  ::ge::proto::TensorDescriptor* add_output_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
      output_desc() const;

  // repeated string subgraph_name = 35;
  int subgraph_name_size() const;
  private:
  int _internal_subgraph_name_size() const;
  public:
  void clear_subgraph_name();
  const std::string& subgraph_name(int index) const;
  std::string* mutable_subgraph_name(int index);
  void set_subgraph_name(int index, const std::string& value);
  void set_subgraph_name(int index, std::string&& value);
  void set_subgraph_name(int index, const char* value);
  void set_subgraph_name(int index, const char* value, size_t size);
  std::string* add_subgraph_name();
  void add_subgraph_name(const std::string& value);
  void add_subgraph_name(std::string&& value);
  void add_subgraph_name(const char* value);
  void add_subgraph_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subgraph_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subgraph_name();
  private:
  const std::string& _internal_subgraph_name(int index) const;
  std::string* _internal_add_subgraph_name();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 id = 21;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool has_out_attr = 20;
  void clear_has_out_attr();
  bool has_out_attr() const;
  void set_has_out_attr(bool value);
  private:
  bool _internal_has_out_attr() const;
  void _internal_set_has_out_attr(bool value);
  public:

  // int64 stream_id = 22;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::int64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.OpDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OpDef_AttrEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> src_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > src_index_;
  mutable std::atomic<int> _src_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dst_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dst_index_;
  mutable std::atomic<int> _dst_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > input_i_;
  mutable std::atomic<int> _input_i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > output_i_;
  mutable std::atomic<int> _output_i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > workspace_;
  mutable std::atomic<int> _workspace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > workspace_bytes_;
  mutable std::atomic<int> _workspace_bytes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_input_const_;
  mutable std::atomic<int> _is_input_const_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor > input_desc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor > output_desc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subgraph_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool has_out_attr_;
  ::PROTOBUF_NAMESPACE_ID::int64 stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class GraphDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GraphDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GraphDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GraphDef_AttrEntry_DoNotUse();
  explicit GraphDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GraphDef_AttrEntry_DoNotUse& other);
  static const GraphDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GraphDef_AttrEntry_DoNotUse*>(&_GraphDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.proto.GraphDef.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class GraphDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.GraphDef) */ {
 public:
  inline GraphDef() : GraphDef(nullptr) {}
  virtual ~GraphDef();

  GraphDef(const GraphDef& from);
  GraphDef(GraphDef&& from) noexcept
    : GraphDef() {
    *this = ::std::move(from);
  }

  inline GraphDef& operator=(const GraphDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDef& operator=(GraphDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDef* internal_default_instance() {
    return reinterpret_cast<const GraphDef*>(
               &_GraphDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GraphDef& a, GraphDef& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphDef* New() const final {
    return CreateMaybeMessage<GraphDef>(nullptr);
  }

  GraphDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphDef& from);
  void MergeFrom(const GraphDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.GraphDef";
  }
  protected:
  explicit GraphDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 4,
    kOutputFieldNumber = 5,
    kOpFieldNumber = 6,
    kAttrFieldNumber = 11,
    kNameFieldNumber = 1,
  };
  // repeated string input = 4;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated string output = 5;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // repeated .ge.proto.OpDef op = 6;
  int op_size() const;
  private:
  int _internal_op_size() const;
  public:
  void clear_op();
  ::ge::proto::OpDef* mutable_op(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::OpDef >*
      mutable_op();
  private:
  const ::ge::proto::OpDef& _internal_op(int index) const;
  ::ge::proto::OpDef* _internal_add_op();
  public:
  const ::ge::proto::OpDef& op(int index) const;
  ::ge::proto::OpDef* add_op();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::OpDef >&
      op() const;

  // map<string, .ge.proto.AttrDef> attr = 11;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.GraphDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::OpDef > op_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GraphDef_AttrEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// -------------------------------------------------------------------

class ModelDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelDef_AttrEntry_DoNotUse, 
    std::string, ::ge::proto::AttrDef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModelDef_AttrEntry_DoNotUse();
  explicit ModelDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelDef_AttrEntry_DoNotUse& other);
  static const ModelDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelDef_AttrEntry_DoNotUse*>(&_ModelDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ge.proto.ModelDef.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class ModelDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ge.proto.ModelDef) */ {
 public:
  inline ModelDef() : ModelDef(nullptr) {}
  virtual ~ModelDef();

  ModelDef(const ModelDef& from);
  ModelDef(ModelDef&& from) noexcept
    : ModelDef() {
    *this = ::std::move(from);
  }

  inline ModelDef& operator=(const ModelDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelDef& operator=(ModelDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelDef* internal_default_instance() {
    return reinterpret_cast<const ModelDef*>(
               &_ModelDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ModelDef& a, ModelDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelDef* New() const final {
    return CreateMaybeMessage<ModelDef>(nullptr);
  }

  ModelDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelDef& from);
  void MergeFrom(const ModelDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ge.proto.ModelDef";
  }
  protected:
  explicit ModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ge_5fir_2eproto);
    return ::descriptor_table_ge_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 7,
    kAttrFieldNumber = 11,
    kNameFieldNumber = 1,
    kCustomVersionFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // repeated .ge.proto.GraphDef graph = 7;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::ge::proto::GraphDef* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >*
      mutable_graph();
  private:
  const ::ge::proto::GraphDef& _internal_graph(int index) const;
  ::ge::proto::GraphDef* _internal_add_graph();
  public:
  const ::ge::proto::GraphDef& graph(int index) const;
  ::ge::proto::GraphDef* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >&
      graph() const;

  // map<string, .ge.proto.AttrDef> attr = 11;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string custom_version = 3;
  void clear_custom_version();
  const std::string& custom_version() const;
  void set_custom_version(const std::string& value);
  void set_custom_version(std::string&& value);
  void set_custom_version(const char* value);
  void set_custom_version(const char* value, size_t size);
  std::string* mutable_custom_version();
  std::string* release_custom_version();
  void set_allocated_custom_version(std::string* custom_version);
  private:
  const std::string& _internal_custom_version() const;
  void _internal_set_custom_version(const std::string& value);
  std::string* _internal_mutable_custom_version();
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ge.proto.ModelDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef > graph_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelDef_AttrEntry_DoNotUse,
      std::string, ::ge::proto::AttrDef,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ge_5fir_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttrDef_ListValue

// repeated bytes s = 2;
inline int AttrDef_ListValue::_internal_s_size() const {
  return s_.size();
}
inline int AttrDef_ListValue::s_size() const {
  return _internal_s_size();
}
inline void AttrDef_ListValue::clear_s() {
  s_.Clear();
}
inline std::string* AttrDef_ListValue::add_s() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.AttrDef.ListValue.s)
  return _internal_add_s();
}
inline const std::string& AttrDef_ListValue::_internal_s(int index) const {
  return s_.Get(index);
}
inline const std::string& AttrDef_ListValue::s(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.s)
  return _internal_s(index);
}
inline std::string* AttrDef_ListValue::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.s)
  return s_.Mutable(index);
}
inline void AttrDef_ListValue::set_s(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.s)
  s_.Mutable(index)->assign(value);
}
inline void AttrDef_ListValue::set_s(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.s)
  s_.Mutable(index)->assign(std::move(value));
}
inline void AttrDef_ListValue::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::set_s(int index, const void* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.AttrDef.ListValue.s)
}
inline std::string* AttrDef_ListValue::_internal_add_s() {
  return s_.Add();
}
inline void AttrDef_ListValue::add_s(const std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.AttrDef.ListValue.s)
}
inline void AttrDef_ListValue::add_s(const void* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.AttrDef.ListValue.s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttrDef_ListValue::s() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.s)
  return s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttrDef_ListValue::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.s)
  return &s_;
}

// repeated int64 i = 3;
inline int AttrDef_ListValue::_internal_i_size() const {
  return i_.size();
}
inline int AttrDef_ListValue::i_size() const {
  return _internal_i_size();
}
inline void AttrDef_ListValue::clear_i() {
  i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::_internal_i(int index) const {
  return i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::i(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.i)
  return _internal_i(index);
}
inline void AttrDef_ListValue::set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.i)
}
inline void AttrDef_ListValue::_internal_add_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Add(value);
}
inline void AttrDef_ListValue::add_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_i(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::_internal_i() const {
  return i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::i() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.i)
  return _internal_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::_internal_mutable_i() {
  return &i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.i)
  return _internal_mutable_i();
}

// repeated float f = 4;
inline int AttrDef_ListValue::_internal_f_size() const {
  return f_.size();
}
inline int AttrDef_ListValue::f_size() const {
  return _internal_f_size();
}
inline void AttrDef_ListValue::clear_f() {
  f_.Clear();
}
inline float AttrDef_ListValue::_internal_f(int index) const {
  return f_.Get(index);
}
inline float AttrDef_ListValue::f(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.f)
  return _internal_f(index);
}
inline void AttrDef_ListValue::set_f(int index, float value) {
  f_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.f)
}
inline void AttrDef_ListValue::_internal_add_f(float value) {
  f_.Add(value);
}
inline void AttrDef_ListValue::add_f(float value) {
  _internal_add_f(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListValue::_internal_f() const {
  return f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListValue::f() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.f)
  return _internal_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListValue::_internal_mutable_f() {
  return &f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListValue::mutable_f() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.f)
  return _internal_mutable_f();
}

// repeated bool b = 5;
inline int AttrDef_ListValue::_internal_b_size() const {
  return b_.size();
}
inline int AttrDef_ListValue::b_size() const {
  return _internal_b_size();
}
inline void AttrDef_ListValue::clear_b() {
  b_.Clear();
}
inline bool AttrDef_ListValue::_internal_b(int index) const {
  return b_.Get(index);
}
inline bool AttrDef_ListValue::b(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.b)
  return _internal_b(index);
}
inline void AttrDef_ListValue::set_b(int index, bool value) {
  b_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.b)
}
inline void AttrDef_ListValue::_internal_add_b(bool value) {
  b_.Add(value);
}
inline void AttrDef_ListValue::add_b(bool value) {
  _internal_add_b(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrDef_ListValue::_internal_b() const {
  return b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AttrDef_ListValue::b() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.b)
  return _internal_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrDef_ListValue::_internal_mutable_b() {
  return &b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AttrDef_ListValue::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.b)
  return _internal_mutable_b();
}

// repeated bytes bt = 7;
inline int AttrDef_ListValue::_internal_bt_size() const {
  return bt_.size();
}
inline int AttrDef_ListValue::bt_size() const {
  return _internal_bt_size();
}
inline void AttrDef_ListValue::clear_bt() {
  bt_.Clear();
}
inline std::string* AttrDef_ListValue::add_bt() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.AttrDef.ListValue.bt)
  return _internal_add_bt();
}
inline const std::string& AttrDef_ListValue::_internal_bt(int index) const {
  return bt_.Get(index);
}
inline const std::string& AttrDef_ListValue::bt(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.bt)
  return _internal_bt(index);
}
inline std::string* AttrDef_ListValue::mutable_bt(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.bt)
  return bt_.Mutable(index);
}
inline void AttrDef_ListValue::set_bt(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.bt)
  bt_.Mutable(index)->assign(value);
}
inline void AttrDef_ListValue::set_bt(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.bt)
  bt_.Mutable(index)->assign(std::move(value));
}
inline void AttrDef_ListValue::set_bt(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::set_bt(int index, const void* value, size_t size) {
  bt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.AttrDef.ListValue.bt)
}
inline std::string* AttrDef_ListValue::_internal_add_bt() {
  return bt_.Add();
}
inline void AttrDef_ListValue::add_bt(const std::string& value) {
  bt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(std::string&& value) {
  bt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.AttrDef.ListValue.bt)
}
inline void AttrDef_ListValue::add_bt(const void* value, size_t size) {
  bt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.AttrDef.ListValue.bt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttrDef_ListValue::bt() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.bt)
  return bt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttrDef_ListValue::mutable_bt() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.bt)
  return &bt_;
}

// repeated .ge.proto.TensorDescriptor td = 8;
inline int AttrDef_ListValue::_internal_td_size() const {
  return td_.size();
}
inline int AttrDef_ListValue::td_size() const {
  return _internal_td_size();
}
inline void AttrDef_ListValue::clear_td() {
  td_.Clear();
}
inline ::ge::proto::TensorDescriptor* AttrDef_ListValue::mutable_td(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.td)
  return td_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
AttrDef_ListValue::mutable_td() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.td)
  return &td_;
}
inline const ::ge::proto::TensorDescriptor& AttrDef_ListValue::_internal_td(int index) const {
  return td_.Get(index);
}
inline const ::ge::proto::TensorDescriptor& AttrDef_ListValue::td(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.td)
  return _internal_td(index);
}
inline ::ge::proto::TensorDescriptor* AttrDef_ListValue::_internal_add_td() {
  return td_.Add();
}
inline ::ge::proto::TensorDescriptor* AttrDef_ListValue::add_td() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.td)
  return _internal_add_td();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
AttrDef_ListValue::td() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.td)
  return td_;
}

// repeated .ge.proto.TensorDef t = 9;
inline int AttrDef_ListValue::_internal_t_size() const {
  return t_.size();
}
inline int AttrDef_ListValue::t_size() const {
  return _internal_t_size();
}
inline void AttrDef_ListValue::clear_t() {
  t_.Clear();
}
inline ::ge::proto::TensorDef* AttrDef_ListValue::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.t)
  return t_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >*
AttrDef_ListValue::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.t)
  return &t_;
}
inline const ::ge::proto::TensorDef& AttrDef_ListValue::_internal_t(int index) const {
  return t_.Get(index);
}
inline const ::ge::proto::TensorDef& AttrDef_ListValue::t(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.t)
  return _internal_t(index);
}
inline ::ge::proto::TensorDef* AttrDef_ListValue::_internal_add_t() {
  return t_.Add();
}
inline ::ge::proto::TensorDef* AttrDef_ListValue::add_t() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.t)
  return _internal_add_t();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDef >&
AttrDef_ListValue::t() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.t)
  return t_;
}

// repeated .ge.proto.GraphDef g = 10;
inline int AttrDef_ListValue::_internal_g_size() const {
  return g_.size();
}
inline int AttrDef_ListValue::g_size() const {
  return _internal_g_size();
}
inline void AttrDef_ListValue::clear_g() {
  g_.Clear();
}
inline ::ge::proto::GraphDef* AttrDef_ListValue::mutable_g(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.g)
  return g_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >*
AttrDef_ListValue::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.g)
  return &g_;
}
inline const ::ge::proto::GraphDef& AttrDef_ListValue::_internal_g(int index) const {
  return g_.Get(index);
}
inline const ::ge::proto::GraphDef& AttrDef_ListValue::g(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.g)
  return _internal_g(index);
}
inline ::ge::proto::GraphDef* AttrDef_ListValue::_internal_add_g() {
  return g_.Add();
}
inline ::ge::proto::GraphDef* AttrDef_ListValue::add_g() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.g)
  return _internal_add_g();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >&
AttrDef_ListValue::g() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.g)
  return g_;
}

// repeated .ge.proto.NamedAttrs na = 11;
inline int AttrDef_ListValue::_internal_na_size() const {
  return na_.size();
}
inline int AttrDef_ListValue::na_size() const {
  return _internal_na_size();
}
inline void AttrDef_ListValue::clear_na() {
  na_.Clear();
}
inline ::ge::proto::NamedAttrs* AttrDef_ListValue::mutable_na(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListValue.na)
  return na_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::NamedAttrs >*
AttrDef_ListValue::mutable_na() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.na)
  return &na_;
}
inline const ::ge::proto::NamedAttrs& AttrDef_ListValue::_internal_na(int index) const {
  return na_.Get(index);
}
inline const ::ge::proto::NamedAttrs& AttrDef_ListValue::na(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.na)
  return _internal_na(index);
}
inline ::ge::proto::NamedAttrs* AttrDef_ListValue::_internal_add_na() {
  return na_.Add();
}
inline ::ge::proto::NamedAttrs* AttrDef_ListValue::add_na() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.na)
  return _internal_add_na();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::NamedAttrs >&
AttrDef_ListValue::na() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.na)
  return na_;
}

// repeated int64 dt = 12;
inline int AttrDef_ListValue::_internal_dt_size() const {
  return dt_.size();
}
inline int AttrDef_ListValue::dt_size() const {
  return _internal_dt_size();
}
inline void AttrDef_ListValue::clear_dt() {
  dt_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::_internal_dt(int index) const {
  return dt_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListValue::dt(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.dt)
  return _internal_dt(index);
}
inline void AttrDef_ListValue::set_dt(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dt_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.dt)
}
inline void AttrDef_ListValue::_internal_add_dt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dt_.Add(value);
}
inline void AttrDef_ListValue::add_dt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dt(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListValue.dt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::_internal_dt() const {
  return dt_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListValue::dt() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListValue.dt)
  return _internal_dt();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::_internal_mutable_dt() {
  return &dt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListValue::mutable_dt() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListValue.dt)
  return _internal_mutable_dt();
}

// .ge.proto.AttrDef.ListValue.ListValueType val_type = 20;
inline void AttrDef_ListValue::clear_val_type() {
  val_type_ = 0;
}
inline ::ge::proto::AttrDef_ListValue_ListValueType AttrDef_ListValue::_internal_val_type() const {
  return static_cast< ::ge::proto::AttrDef_ListValue_ListValueType >(val_type_);
}
inline ::ge::proto::AttrDef_ListValue_ListValueType AttrDef_ListValue::val_type() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListValue.val_type)
  return _internal_val_type();
}
inline void AttrDef_ListValue::_internal_set_val_type(::ge::proto::AttrDef_ListValue_ListValueType value) {
  
  val_type_ = value;
}
inline void AttrDef_ListValue::set_val_type(::ge::proto::AttrDef_ListValue_ListValueType value) {
  _internal_set_val_type(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListValue.val_type)
}

// -------------------------------------------------------------------

// AttrDef_ListListInt_ListInt

// repeated int64 list_i = 1;
inline int AttrDef_ListListInt_ListInt::_internal_list_i_size() const {
  return list_i_.size();
}
inline int AttrDef_ListListInt_ListInt::list_i_size() const {
  return _internal_list_i_size();
}
inline void AttrDef_ListListInt_ListInt::clear_list_i() {
  list_i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListListInt_ListInt::_internal_list_i(int index) const {
  return list_i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef_ListListInt_ListInt::list_i(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListListInt.ListInt.list_i)
  return _internal_list_i(index);
}
inline void AttrDef_ListListInt_ListInt::set_list_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  list_i_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListListInt.ListInt.list_i)
}
inline void AttrDef_ListListInt_ListInt::_internal_add_list_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  list_i_.Add(value);
}
inline void AttrDef_ListListInt_ListInt::add_list_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_list_i(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListListInt.ListInt.list_i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListListInt_ListInt::_internal_list_i() const {
  return list_i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttrDef_ListListInt_ListInt::list_i() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListListInt.ListInt.list_i)
  return _internal_list_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListListInt_ListInt::_internal_mutable_list_i() {
  return &list_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttrDef_ListListInt_ListInt::mutable_list_i() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListListInt.ListInt.list_i)
  return _internal_mutable_list_i();
}

// -------------------------------------------------------------------

// AttrDef_ListListInt

// repeated .ge.proto.AttrDef.ListListInt.ListInt list_list_i = 1;
inline int AttrDef_ListListInt::_internal_list_list_i_size() const {
  return list_list_i_.size();
}
inline int AttrDef_ListListInt::list_list_i_size() const {
  return _internal_list_list_i_size();
}
inline void AttrDef_ListListInt::clear_list_list_i() {
  list_list_i_.Clear();
}
inline ::ge::proto::AttrDef_ListListInt_ListInt* AttrDef_ListListInt::mutable_list_list_i(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListListInt.list_list_i)
  return list_list_i_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListInt_ListInt >*
AttrDef_ListListInt::mutable_list_list_i() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListListInt.list_list_i)
  return &list_list_i_;
}
inline const ::ge::proto::AttrDef_ListListInt_ListInt& AttrDef_ListListInt::_internal_list_list_i(int index) const {
  return list_list_i_.Get(index);
}
inline const ::ge::proto::AttrDef_ListListInt_ListInt& AttrDef_ListListInt::list_list_i(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListListInt.list_list_i)
  return _internal_list_list_i(index);
}
inline ::ge::proto::AttrDef_ListListInt_ListInt* AttrDef_ListListInt::_internal_add_list_list_i() {
  return list_list_i_.Add();
}
inline ::ge::proto::AttrDef_ListListInt_ListInt* AttrDef_ListListInt::add_list_list_i() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListListInt.list_list_i)
  return _internal_add_list_list_i();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListInt_ListInt >&
AttrDef_ListListInt::list_list_i() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListListInt.list_list_i)
  return list_list_i_;
}

// -------------------------------------------------------------------

// AttrDef_ListListFloat_ListFloat

// repeated float list_f = 1;
inline int AttrDef_ListListFloat_ListFloat::_internal_list_f_size() const {
  return list_f_.size();
}
inline int AttrDef_ListListFloat_ListFloat::list_f_size() const {
  return _internal_list_f_size();
}
inline void AttrDef_ListListFloat_ListFloat::clear_list_f() {
  list_f_.Clear();
}
inline float AttrDef_ListListFloat_ListFloat::_internal_list_f(int index) const {
  return list_f_.Get(index);
}
inline float AttrDef_ListListFloat_ListFloat::list_f(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListListFloat.ListFloat.list_f)
  return _internal_list_f(index);
}
inline void AttrDef_ListListFloat_ListFloat::set_list_f(int index, float value) {
  list_f_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.ListListFloat.ListFloat.list_f)
}
inline void AttrDef_ListListFloat_ListFloat::_internal_add_list_f(float value) {
  list_f_.Add(value);
}
inline void AttrDef_ListListFloat_ListFloat::add_list_f(float value) {
  _internal_add_list_f(value);
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListListFloat.ListFloat.list_f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListListFloat_ListFloat::_internal_list_f() const {
  return list_f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttrDef_ListListFloat_ListFloat::list_f() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListListFloat.ListFloat.list_f)
  return _internal_list_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListListFloat_ListFloat::_internal_mutable_list_f() {
  return &list_f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttrDef_ListListFloat_ListFloat::mutable_list_f() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListListFloat.ListFloat.list_f)
  return _internal_mutable_list_f();
}

// -------------------------------------------------------------------

// AttrDef_ListListFloat

// repeated .ge.proto.AttrDef.ListListFloat.ListFloat list_list_f = 1;
inline int AttrDef_ListListFloat::_internal_list_list_f_size() const {
  return list_list_f_.size();
}
inline int AttrDef_ListListFloat::list_list_f_size() const {
  return _internal_list_list_f_size();
}
inline void AttrDef_ListListFloat::clear_list_list_f() {
  list_list_f_.Clear();
}
inline ::ge::proto::AttrDef_ListListFloat_ListFloat* AttrDef_ListListFloat::mutable_list_list_f(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.ListListFloat.list_list_f)
  return list_list_f_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListFloat_ListFloat >*
AttrDef_ListListFloat::mutable_list_list_f() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.AttrDef.ListListFloat.list_list_f)
  return &list_list_f_;
}
inline const ::ge::proto::AttrDef_ListListFloat_ListFloat& AttrDef_ListListFloat::_internal_list_list_f(int index) const {
  return list_list_f_.Get(index);
}
inline const ::ge::proto::AttrDef_ListListFloat_ListFloat& AttrDef_ListListFloat::list_list_f(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.ListListFloat.list_list_f)
  return _internal_list_list_f(index);
}
inline ::ge::proto::AttrDef_ListListFloat_ListFloat* AttrDef_ListListFloat::_internal_add_list_list_f() {
  return list_list_f_.Add();
}
inline ::ge::proto::AttrDef_ListListFloat_ListFloat* AttrDef_ListListFloat::add_list_list_f() {
  // @@protoc_insertion_point(field_add:ge.proto.AttrDef.ListListFloat.list_list_f)
  return _internal_add_list_list_f();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::AttrDef_ListListFloat_ListFloat >&
AttrDef_ListListFloat::list_list_f() const {
  // @@protoc_insertion_point(field_list:ge.proto.AttrDef.ListListFloat.list_list_f)
  return list_list_f_;
}

// -------------------------------------------------------------------

// AttrDef

// bytes s = 2;
inline bool AttrDef::_internal_has_s() const {
  return value_case() == kS;
}
inline void AttrDef::set_has_s() {
  _oneof_case_[0] = kS;
}
inline void AttrDef::clear_s() {
  if (_internal_has_s()) {
    value_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& AttrDef::s() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.s)
  return _internal_s();
}
inline void AttrDef::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.s)
}
inline std::string* AttrDef::mutable_s() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.s)
  return _internal_mutable_s();
}
inline const std::string& AttrDef::_internal_s() const {
  if (_internal_has_s()) {
    return value_.s_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttrDef::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttrDef::set_s(std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.s)
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.AttrDef.s)
}
inline void AttrDef::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.AttrDef.s)
}
inline void AttrDef::set_s(const void* value,
                             size_t size) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.AttrDef.s)
}
inline std::string* AttrDef::_internal_mutable_s() {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.s_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttrDef::release_s() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.s)
  if (_internal_has_s()) {
    clear_has_value();
    return value_.s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AttrDef::set_allocated_s(std::string* s) {
  if (has_value()) {
    clear_value();
  }
  if (s != nullptr) {
    set_has_s();
    value_.s_.UnsafeSetDefault(s);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(s);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.s)
}

// int64 i = 3;
inline bool AttrDef::_internal_has_i() const {
  return value_case() == kI;
}
inline void AttrDef::set_has_i() {
  _oneof_case_[0] = kI;
}
inline void AttrDef::clear_i() {
  if (_internal_has_i()) {
    value_.i_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::_internal_i() const {
  if (_internal_has_i()) {
    return value_.i_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AttrDef::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i()) {
    clear_value();
    set_has_i();
  }
  value_.i_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::i() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.i)
  return _internal_i();
}
inline void AttrDef::set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.i)
}

// float f = 4;
inline bool AttrDef::_internal_has_f() const {
  return value_case() == kF;
}
inline void AttrDef::set_has_f() {
  _oneof_case_[0] = kF;
}
inline void AttrDef::clear_f() {
  if (_internal_has_f()) {
    value_.f_ = 0;
    clear_has_value();
  }
}
inline float AttrDef::_internal_f() const {
  if (_internal_has_f()) {
    return value_.f_;
  }
  return 0;
}
inline void AttrDef::_internal_set_f(float value) {
  if (!_internal_has_f()) {
    clear_value();
    set_has_f();
  }
  value_.f_ = value;
}
inline float AttrDef::f() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.f)
  return _internal_f();
}
inline void AttrDef::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.f)
}

// bool b = 5;
inline bool AttrDef::_internal_has_b() const {
  return value_case() == kB;
}
inline void AttrDef::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void AttrDef::clear_b() {
  if (_internal_has_b()) {
    value_.b_ = false;
    clear_has_value();
  }
}
inline bool AttrDef::_internal_b() const {
  if (_internal_has_b()) {
    return value_.b_;
  }
  return false;
}
inline void AttrDef::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  value_.b_ = value;
}
inline bool AttrDef::b() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.b)
  return _internal_b();
}
inline void AttrDef::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.b)
}

// bytes bt = 7;
inline bool AttrDef::_internal_has_bt() const {
  return value_case() == kBt;
}
inline void AttrDef::set_has_bt() {
  _oneof_case_[0] = kBt;
}
inline void AttrDef::clear_bt() {
  if (_internal_has_bt()) {
    value_.bt_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& AttrDef::bt() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.bt)
  return _internal_bt();
}
inline void AttrDef::set_bt(const std::string& value) {
  _internal_set_bt(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.bt)
}
inline std::string* AttrDef::mutable_bt() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.bt)
  return _internal_mutable_bt();
}
inline const std::string& AttrDef::_internal_bt() const {
  if (_internal_has_bt()) {
    return value_.bt_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AttrDef::_internal_set_bt(const std::string& value) {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttrDef::set_bt(std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.bt)
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.AttrDef.bt)
}
inline void AttrDef::set_bt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.AttrDef.bt)
}
inline void AttrDef::set_bt(const void* value,
                             size_t size) {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bt_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.AttrDef.bt)
}
inline std::string* AttrDef::_internal_mutable_bt() {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
    value_.bt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttrDef::release_bt() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.bt)
  if (_internal_has_bt()) {
    clear_has_value();
    return value_.bt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AttrDef::set_allocated_bt(std::string* bt) {
  if (has_value()) {
    clear_value();
  }
  if (bt != nullptr) {
    set_has_bt();
    value_.bt_.UnsafeSetDefault(bt);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(bt);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ge.proto.AttrDef.bt)
}

// .ge.proto.AttrDef.ListValue list = 1;
inline bool AttrDef::_internal_has_list() const {
  return value_case() == kList;
}
inline bool AttrDef::has_list() const {
  return _internal_has_list();
}
inline void AttrDef::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void AttrDef::clear_list() {
  if (_internal_has_list()) {
    if (GetArena() == nullptr) {
      delete value_.list_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::AttrDef_ListValue* AttrDef::release_list() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.list)
  if (_internal_has_list()) {
    clear_has_value();
      ::ge::proto::AttrDef_ListValue* temp = value_.list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::AttrDef_ListValue& AttrDef::_internal_list() const {
  return _internal_has_list()
      ? *value_.list_
      : *reinterpret_cast< ::ge::proto::AttrDef_ListValue*>(&::ge::proto::_AttrDef_ListValue_default_instance_);
}
inline const ::ge::proto::AttrDef_ListValue& AttrDef::list() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.list)
  return _internal_list();
}
inline ::ge::proto::AttrDef_ListValue* AttrDef::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::ge::proto::AttrDef_ListValue* temp = value_.list_;
    value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_list(::ge::proto::AttrDef_ListValue* list) {
  clear_value();
  if (list) {
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.list)
}
inline ::ge::proto::AttrDef_ListValue* AttrDef::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_value();
    set_has_list();
    value_.list_ = CreateMaybeMessage< ::ge::proto::AttrDef_ListValue >(GetArena());
  }
  return value_.list_;
}
inline ::ge::proto::AttrDef_ListValue* AttrDef::mutable_list() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.list)
  return _internal_mutable_list();
}

// .ge.proto.NamedAttrs func = 10;
inline bool AttrDef::_internal_has_func() const {
  return value_case() == kFunc;
}
inline bool AttrDef::has_func() const {
  return _internal_has_func();
}
inline void AttrDef::set_has_func() {
  _oneof_case_[0] = kFunc;
}
inline void AttrDef::clear_func() {
  if (_internal_has_func()) {
    if (GetArena() == nullptr) {
      delete value_.func_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::NamedAttrs* AttrDef::release_func() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.func)
  if (_internal_has_func()) {
    clear_has_value();
      ::ge::proto::NamedAttrs* temp = value_.func_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::NamedAttrs& AttrDef::_internal_func() const {
  return _internal_has_func()
      ? *value_.func_
      : *reinterpret_cast< ::ge::proto::NamedAttrs*>(&::ge::proto::_NamedAttrs_default_instance_);
}
inline const ::ge::proto::NamedAttrs& AttrDef::func() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.func)
  return _internal_func();
}
inline ::ge::proto::NamedAttrs* AttrDef::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.func)
  if (_internal_has_func()) {
    clear_has_value();
    ::ge::proto::NamedAttrs* temp = value_.func_;
    value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_func(::ge::proto::NamedAttrs* func) {
  clear_value();
  if (func) {
    set_has_func();
    value_.func_ = func;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.func)
}
inline ::ge::proto::NamedAttrs* AttrDef::_internal_mutable_func() {
  if (!_internal_has_func()) {
    clear_value();
    set_has_func();
    value_.func_ = CreateMaybeMessage< ::ge::proto::NamedAttrs >(GetArena());
  }
  return value_.func_;
}
inline ::ge::proto::NamedAttrs* AttrDef::mutable_func() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.func)
  return _internal_mutable_func();
}

// .ge.proto.TensorDescriptor td = 11;
inline bool AttrDef::_internal_has_td() const {
  return value_case() == kTd;
}
inline bool AttrDef::has_td() const {
  return _internal_has_td();
}
inline void AttrDef::set_has_td() {
  _oneof_case_[0] = kTd;
}
inline void AttrDef::clear_td() {
  if (_internal_has_td()) {
    if (GetArena() == nullptr) {
      delete value_.td_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::TensorDescriptor* AttrDef::release_td() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.td)
  if (_internal_has_td()) {
    clear_has_value();
      ::ge::proto::TensorDescriptor* temp = value_.td_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.td_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::TensorDescriptor& AttrDef::_internal_td() const {
  return _internal_has_td()
      ? *value_.td_
      : *reinterpret_cast< ::ge::proto::TensorDescriptor*>(&::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& AttrDef::td() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.td)
  return _internal_td();
}
inline ::ge::proto::TensorDescriptor* AttrDef::unsafe_arena_release_td() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.td)
  if (_internal_has_td()) {
    clear_has_value();
    ::ge::proto::TensorDescriptor* temp = value_.td_;
    value_.td_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_td(::ge::proto::TensorDescriptor* td) {
  clear_value();
  if (td) {
    set_has_td();
    value_.td_ = td;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.td)
}
inline ::ge::proto::TensorDescriptor* AttrDef::_internal_mutable_td() {
  if (!_internal_has_td()) {
    clear_value();
    set_has_td();
    value_.td_ = CreateMaybeMessage< ::ge::proto::TensorDescriptor >(GetArena());
  }
  return value_.td_;
}
inline ::ge::proto::TensorDescriptor* AttrDef::mutable_td() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.td)
  return _internal_mutable_td();
}

// .ge.proto.TensorDef t = 12;
inline bool AttrDef::_internal_has_t() const {
  return value_case() == kT;
}
inline bool AttrDef::has_t() const {
  return _internal_has_t();
}
inline void AttrDef::set_has_t() {
  _oneof_case_[0] = kT;
}
inline void AttrDef::clear_t() {
  if (_internal_has_t()) {
    if (GetArena() == nullptr) {
      delete value_.t_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::TensorDef* AttrDef::release_t() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.t)
  if (_internal_has_t()) {
    clear_has_value();
      ::ge::proto::TensorDef* temp = value_.t_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.t_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::TensorDef& AttrDef::_internal_t() const {
  return _internal_has_t()
      ? *value_.t_
      : *reinterpret_cast< ::ge::proto::TensorDef*>(&::ge::proto::_TensorDef_default_instance_);
}
inline const ::ge::proto::TensorDef& AttrDef::t() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.t)
  return _internal_t();
}
inline ::ge::proto::TensorDef* AttrDef::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.t)
  if (_internal_has_t()) {
    clear_has_value();
    ::ge::proto::TensorDef* temp = value_.t_;
    value_.t_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_t(::ge::proto::TensorDef* t) {
  clear_value();
  if (t) {
    set_has_t();
    value_.t_ = t;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.t)
}
inline ::ge::proto::TensorDef* AttrDef::_internal_mutable_t() {
  if (!_internal_has_t()) {
    clear_value();
    set_has_t();
    value_.t_ = CreateMaybeMessage< ::ge::proto::TensorDef >(GetArena());
  }
  return value_.t_;
}
inline ::ge::proto::TensorDef* AttrDef::mutable_t() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.t)
  return _internal_mutable_t();
}

// .ge.proto.GraphDef g = 13;
inline bool AttrDef::_internal_has_g() const {
  return value_case() == kG;
}
inline bool AttrDef::has_g() const {
  return _internal_has_g();
}
inline void AttrDef::set_has_g() {
  _oneof_case_[0] = kG;
}
inline void AttrDef::clear_g() {
  if (_internal_has_g()) {
    if (GetArena() == nullptr) {
      delete value_.g_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::GraphDef* AttrDef::release_g() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.g)
  if (_internal_has_g()) {
    clear_has_value();
      ::ge::proto::GraphDef* temp = value_.g_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.g_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::GraphDef& AttrDef::_internal_g() const {
  return _internal_has_g()
      ? *value_.g_
      : *reinterpret_cast< ::ge::proto::GraphDef*>(&::ge::proto::_GraphDef_default_instance_);
}
inline const ::ge::proto::GraphDef& AttrDef::g() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.g)
  return _internal_g();
}
inline ::ge::proto::GraphDef* AttrDef::unsafe_arena_release_g() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.g)
  if (_internal_has_g()) {
    clear_has_value();
    ::ge::proto::GraphDef* temp = value_.g_;
    value_.g_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_g(::ge::proto::GraphDef* g) {
  clear_value();
  if (g) {
    set_has_g();
    value_.g_ = g;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.g)
}
inline ::ge::proto::GraphDef* AttrDef::_internal_mutable_g() {
  if (!_internal_has_g()) {
    clear_value();
    set_has_g();
    value_.g_ = CreateMaybeMessage< ::ge::proto::GraphDef >(GetArena());
  }
  return value_.g_;
}
inline ::ge::proto::GraphDef* AttrDef::mutable_g() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.g)
  return _internal_mutable_g();
}

// .ge.proto.AttrDef.ListListInt list_list_int = 14;
inline bool AttrDef::_internal_has_list_list_int() const {
  return value_case() == kListListInt;
}
inline bool AttrDef::has_list_list_int() const {
  return _internal_has_list_list_int();
}
inline void AttrDef::set_has_list_list_int() {
  _oneof_case_[0] = kListListInt;
}
inline void AttrDef::clear_list_list_int() {
  if (_internal_has_list_list_int()) {
    if (GetArena() == nullptr) {
      delete value_.list_list_int_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::AttrDef_ListListInt* AttrDef::release_list_list_int() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.list_list_int)
  if (_internal_has_list_list_int()) {
    clear_has_value();
      ::ge::proto::AttrDef_ListListInt* temp = value_.list_list_int_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.list_list_int_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::AttrDef_ListListInt& AttrDef::_internal_list_list_int() const {
  return _internal_has_list_list_int()
      ? *value_.list_list_int_
      : *reinterpret_cast< ::ge::proto::AttrDef_ListListInt*>(&::ge::proto::_AttrDef_ListListInt_default_instance_);
}
inline const ::ge::proto::AttrDef_ListListInt& AttrDef::list_list_int() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.list_list_int)
  return _internal_list_list_int();
}
inline ::ge::proto::AttrDef_ListListInt* AttrDef::unsafe_arena_release_list_list_int() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.list_list_int)
  if (_internal_has_list_list_int()) {
    clear_has_value();
    ::ge::proto::AttrDef_ListListInt* temp = value_.list_list_int_;
    value_.list_list_int_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_list_list_int(::ge::proto::AttrDef_ListListInt* list_list_int) {
  clear_value();
  if (list_list_int) {
    set_has_list_list_int();
    value_.list_list_int_ = list_list_int;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.list_list_int)
}
inline ::ge::proto::AttrDef_ListListInt* AttrDef::_internal_mutable_list_list_int() {
  if (!_internal_has_list_list_int()) {
    clear_value();
    set_has_list_list_int();
    value_.list_list_int_ = CreateMaybeMessage< ::ge::proto::AttrDef_ListListInt >(GetArena());
  }
  return value_.list_list_int_;
}
inline ::ge::proto::AttrDef_ListListInt* AttrDef::mutable_list_list_int() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.list_list_int)
  return _internal_mutable_list_list_int();
}

// int64 dt = 15;
inline bool AttrDef::_internal_has_dt() const {
  return value_case() == kDt;
}
inline void AttrDef::set_has_dt() {
  _oneof_case_[0] = kDt;
}
inline void AttrDef::clear_dt() {
  if (_internal_has_dt()) {
    value_.dt_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::_internal_dt() const {
  if (_internal_has_dt()) {
    return value_.dt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AttrDef::_internal_set_dt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_dt()) {
    clear_value();
    set_has_dt();
  }
  value_.dt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttrDef::dt() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.dt)
  return _internal_dt();
}
inline void AttrDef::set_dt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:ge.proto.AttrDef.dt)
}

// .ge.proto.AttrDef.ListListFloat list_list_float = 16;
inline bool AttrDef::_internal_has_list_list_float() const {
  return value_case() == kListListFloat;
}
inline bool AttrDef::has_list_list_float() const {
  return _internal_has_list_list_float();
}
inline void AttrDef::set_has_list_list_float() {
  _oneof_case_[0] = kListListFloat;
}
inline void AttrDef::clear_list_list_float() {
  if (_internal_has_list_list_float()) {
    if (GetArena() == nullptr) {
      delete value_.list_list_float_;
    }
    clear_has_value();
  }
}
inline ::ge::proto::AttrDef_ListListFloat* AttrDef::release_list_list_float() {
  // @@protoc_insertion_point(field_release:ge.proto.AttrDef.list_list_float)
  if (_internal_has_list_list_float()) {
    clear_has_value();
      ::ge::proto::AttrDef_ListListFloat* temp = value_.list_list_float_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.list_list_float_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ge::proto::AttrDef_ListListFloat& AttrDef::_internal_list_list_float() const {
  return _internal_has_list_list_float()
      ? *value_.list_list_float_
      : *reinterpret_cast< ::ge::proto::AttrDef_ListListFloat*>(&::ge::proto::_AttrDef_ListListFloat_default_instance_);
}
inline const ::ge::proto::AttrDef_ListListFloat& AttrDef::list_list_float() const {
  // @@protoc_insertion_point(field_get:ge.proto.AttrDef.list_list_float)
  return _internal_list_list_float();
}
inline ::ge::proto::AttrDef_ListListFloat* AttrDef::unsafe_arena_release_list_list_float() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ge.proto.AttrDef.list_list_float)
  if (_internal_has_list_list_float()) {
    clear_has_value();
    ::ge::proto::AttrDef_ListListFloat* temp = value_.list_list_float_;
    value_.list_list_float_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrDef::unsafe_arena_set_allocated_list_list_float(::ge::proto::AttrDef_ListListFloat* list_list_float) {
  clear_value();
  if (list_list_float) {
    set_has_list_list_float();
    value_.list_list_float_ = list_list_float;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.AttrDef.list_list_float)
}
inline ::ge::proto::AttrDef_ListListFloat* AttrDef::_internal_mutable_list_list_float() {
  if (!_internal_has_list_list_float()) {
    clear_value();
    set_has_list_list_float();
    value_.list_list_float_ = CreateMaybeMessage< ::ge::proto::AttrDef_ListListFloat >(GetArena());
  }
  return value_.list_list_float_;
}
inline ::ge::proto::AttrDef_ListListFloat* AttrDef::mutable_list_list_float() {
  // @@protoc_insertion_point(field_mutable:ge.proto.AttrDef.list_list_float)
  return _internal_mutable_list_list_float();
}

inline bool AttrDef::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttrDef::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AttrDef::ValueCase AttrDef::value_case() const {
  return AttrDef::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NamedAttrs

// string name = 1;
inline void NamedAttrs::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedAttrs::name() const {
  // @@protoc_insertion_point(field_get:ge.proto.NamedAttrs.name)
  return _internal_name();
}
inline void NamedAttrs::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.proto.NamedAttrs.name)
}
inline std::string* NamedAttrs::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.proto.NamedAttrs.name)
  return _internal_mutable_name();
}
inline const std::string& NamedAttrs::_internal_name() const {
  return name_.Get();
}
inline void NamedAttrs::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedAttrs::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.NamedAttrs.name)
}
inline void NamedAttrs::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.NamedAttrs.name)
}
inline void NamedAttrs::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.NamedAttrs.name)
}
inline std::string* NamedAttrs::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedAttrs::release_name() {
  // @@protoc_insertion_point(field_release:ge.proto.NamedAttrs.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedAttrs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.NamedAttrs.name)
}

// map<string, .ge.proto.AttrDef> attr = 2;
inline int NamedAttrs::_internal_attr_size() const {
  return attr_.size();
}
inline int NamedAttrs::attr_size() const {
  return _internal_attr_size();
}
inline void NamedAttrs::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
NamedAttrs::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
NamedAttrs::attr() const {
  // @@protoc_insertion_point(field_map:ge.proto.NamedAttrs.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
NamedAttrs::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
NamedAttrs::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:ge.proto.NamedAttrs.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// ShapeDef

// repeated int64 dim = 1;
inline int ShapeDef::_internal_dim_size() const {
  return dim_.size();
}
inline int ShapeDef::dim_size() const {
  return _internal_dim_size();
}
inline void ShapeDef::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeDef::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeDef::dim(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.ShapeDef.dim)
  return _internal_dim(index);
}
inline void ShapeDef::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.ShapeDef.dim)
}
inline void ShapeDef::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
}
inline void ShapeDef::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:ge.proto.ShapeDef.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeDef::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeDef::dim() const {
  // @@protoc_insertion_point(field_list:ge.proto.ShapeDef.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeDef::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeDef::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.ShapeDef.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TensorDescriptor

// string name = 1;
inline void TensorDescriptor::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorDescriptor::name() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.name)
  return _internal_name();
}
inline void TensorDescriptor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.name)
}
inline std::string* TensorDescriptor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDescriptor.name)
  return _internal_mutable_name();
}
inline const std::string& TensorDescriptor::_internal_name() const {
  return name_.Get();
}
inline void TensorDescriptor::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorDescriptor::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.TensorDescriptor.name)
}
inline void TensorDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.TensorDescriptor.name)
}
inline void TensorDescriptor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.TensorDescriptor.name)
}
inline std::string* TensorDescriptor::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDescriptor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDescriptor.name)
}

// .ge.proto.DataType dtype = 2;
inline void TensorDescriptor::clear_dtype() {
  dtype_ = 0;
}
inline ::ge::proto::DataType TensorDescriptor::_internal_dtype() const {
  return static_cast< ::ge::proto::DataType >(dtype_);
}
inline ::ge::proto::DataType TensorDescriptor::dtype() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.dtype)
  return _internal_dtype();
}
inline void TensorDescriptor::_internal_set_dtype(::ge::proto::DataType value) {
  
  dtype_ = value;
}
inline void TensorDescriptor::set_dtype(::ge::proto::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.dtype)
}

// .ge.proto.ShapeDef shape = 3;
inline bool TensorDescriptor::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool TensorDescriptor::has_shape() const {
  return _internal_has_shape();
}
inline void TensorDescriptor::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::ge::proto::ShapeDef& TensorDescriptor::_internal_shape() const {
  const ::ge::proto::ShapeDef* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::ShapeDef*>(
      &::ge::proto::_ShapeDef_default_instance_);
}
inline const ::ge::proto::ShapeDef& TensorDescriptor::shape() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.shape)
  return _internal_shape();
}
inline void TensorDescriptor::unsafe_arena_set_allocated_shape(
    ::ge::proto::ShapeDef* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.TensorDescriptor.shape)
}
inline ::ge::proto::ShapeDef* TensorDescriptor::release_shape() {
  
  ::ge::proto::ShapeDef* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::ShapeDef* TensorDescriptor::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDescriptor.shape)
  
  ::ge::proto::ShapeDef* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::ge::proto::ShapeDef* TensorDescriptor::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::ShapeDef>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::ge::proto::ShapeDef* TensorDescriptor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDescriptor.shape)
  return _internal_mutable_shape();
}
inline void TensorDescriptor::set_allocated_shape(::ge::proto::ShapeDef* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDescriptor.shape)
}

// string layout = 4;
inline void TensorDescriptor::clear_layout() {
  layout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorDescriptor::layout() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.layout)
  return _internal_layout();
}
inline void TensorDescriptor::set_layout(const std::string& value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.layout)
}
inline std::string* TensorDescriptor::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDescriptor.layout)
  return _internal_mutable_layout();
}
inline const std::string& TensorDescriptor::_internal_layout() const {
  return layout_.Get();
}
inline void TensorDescriptor::_internal_set_layout(const std::string& value) {
  
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorDescriptor::set_layout(std::string&& value) {
  
  layout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.TensorDescriptor.layout)
}
inline void TensorDescriptor::set_layout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.TensorDescriptor.layout)
}
inline void TensorDescriptor::set_layout(const char* value,
    size_t size) {
  
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.TensorDescriptor.layout)
}
inline std::string* TensorDescriptor::_internal_mutable_layout() {
  
  return layout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorDescriptor::release_layout() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDescriptor.layout)
  return layout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorDescriptor::set_allocated_layout(std::string* layout) {
  if (layout != nullptr) {
    
  } else {
    
  }
  layout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDescriptor.layout)
}

// bool has_out_attr = 9;
inline void TensorDescriptor::clear_has_out_attr() {
  has_out_attr_ = false;
}
inline bool TensorDescriptor::_internal_has_out_attr() const {
  return has_out_attr_;
}
inline bool TensorDescriptor::has_out_attr() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.has_out_attr)
  return _internal_has_out_attr();
}
inline void TensorDescriptor::_internal_set_has_out_attr(bool value) {
  
  has_out_attr_ = value;
}
inline void TensorDescriptor::set_has_out_attr(bool value) {
  _internal_set_has_out_attr(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.has_out_attr)
}

// int64 size = 10;
inline void TensorDescriptor::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::size() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.size)
  return _internal_size();
}
inline void TensorDescriptor::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void TensorDescriptor::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.size)
}

// int64 weight_size = 11;
inline void TensorDescriptor::clear_weight_size() {
  weight_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_weight_size() const {
  return weight_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::weight_size() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.weight_size)
  return _internal_weight_size();
}
inline void TensorDescriptor::_internal_set_weight_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weight_size_ = value;
}
inline void TensorDescriptor::set_weight_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_weight_size(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.weight_size)
}

// bool reuse_input = 12;
inline void TensorDescriptor::clear_reuse_input() {
  reuse_input_ = false;
}
inline bool TensorDescriptor::_internal_reuse_input() const {
  return reuse_input_;
}
inline bool TensorDescriptor::reuse_input() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.reuse_input)
  return _internal_reuse_input();
}
inline void TensorDescriptor::_internal_set_reuse_input(bool value) {
  
  reuse_input_ = value;
}
inline void TensorDescriptor::set_reuse_input(bool value) {
  _internal_set_reuse_input(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.reuse_input)
}

// bool output_tensor = 13;
inline void TensorDescriptor::clear_output_tensor() {
  output_tensor_ = false;
}
inline bool TensorDescriptor::_internal_output_tensor() const {
  return output_tensor_;
}
inline bool TensorDescriptor::output_tensor() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.output_tensor)
  return _internal_output_tensor();
}
inline void TensorDescriptor::_internal_set_output_tensor(bool value) {
  
  output_tensor_ = value;
}
inline void TensorDescriptor::set_output_tensor(bool value) {
  _internal_set_output_tensor(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.output_tensor)
}

// string device_type = 14;
inline void TensorDescriptor::clear_device_type() {
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorDescriptor::device_type() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.device_type)
  return _internal_device_type();
}
inline void TensorDescriptor::set_device_type(const std::string& value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.device_type)
}
inline std::string* TensorDescriptor::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDescriptor.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& TensorDescriptor::_internal_device_type() const {
  return device_type_.Get();
}
inline void TensorDescriptor::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorDescriptor::set_device_type(std::string&& value) {
  
  device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.TensorDescriptor.device_type)
}
inline void TensorDescriptor::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.TensorDescriptor.device_type)
}
inline void TensorDescriptor::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.TensorDescriptor.device_type)
}
inline std::string* TensorDescriptor::_internal_mutable_device_type() {
  
  return device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorDescriptor::release_device_type() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDescriptor.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorDescriptor::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDescriptor.device_type)
}

// bool input_tensor = 15;
inline void TensorDescriptor::clear_input_tensor() {
  input_tensor_ = false;
}
inline bool TensorDescriptor::_internal_input_tensor() const {
  return input_tensor_;
}
inline bool TensorDescriptor::input_tensor() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.input_tensor)
  return _internal_input_tensor();
}
inline void TensorDescriptor::_internal_set_input_tensor(bool value) {
  
  input_tensor_ = value;
}
inline void TensorDescriptor::set_input_tensor(bool value) {
  _internal_set_input_tensor(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.input_tensor)
}

// int64 real_dim_cnt = 16;
inline void TensorDescriptor::clear_real_dim_cnt() {
  real_dim_cnt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_real_dim_cnt() const {
  return real_dim_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::real_dim_cnt() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.real_dim_cnt)
  return _internal_real_dim_cnt();
}
inline void TensorDescriptor::_internal_set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  real_dim_cnt_ = value;
}
inline void TensorDescriptor::set_real_dim_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_real_dim_cnt(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.real_dim_cnt)
}

// int64 reuse_input_index = 17;
inline void TensorDescriptor::clear_reuse_input_index() {
  reuse_input_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_reuse_input_index() const {
  return reuse_input_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::reuse_input_index() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.reuse_input_index)
  return _internal_reuse_input_index();
}
inline void TensorDescriptor::_internal_set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reuse_input_index_ = value;
}
inline void TensorDescriptor::set_reuse_input_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reuse_input_index(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.reuse_input_index)
}

// int64 data_offset = 18;
inline void TensorDescriptor::clear_data_offset() {
  data_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_data_offset() const {
  return data_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::data_offset() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.data_offset)
  return _internal_data_offset();
}
inline void TensorDescriptor::_internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_offset_ = value;
}
inline void TensorDescriptor::set_data_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_offset(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.data_offset)
}

// int64 cmps_size = 19;
inline void TensorDescriptor::clear_cmps_size() {
  cmps_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_cmps_size() const {
  return cmps_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::cmps_size() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.cmps_size)
  return _internal_cmps_size();
}
inline void TensorDescriptor::_internal_set_cmps_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cmps_size_ = value;
}
inline void TensorDescriptor::set_cmps_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cmps_size(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.cmps_size)
}

// string cmps_tab = 20;
inline void TensorDescriptor::clear_cmps_tab() {
  cmps_tab_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorDescriptor::cmps_tab() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.cmps_tab)
  return _internal_cmps_tab();
}
inline void TensorDescriptor::set_cmps_tab(const std::string& value) {
  _internal_set_cmps_tab(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.cmps_tab)
}
inline std::string* TensorDescriptor::mutable_cmps_tab() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDescriptor.cmps_tab)
  return _internal_mutable_cmps_tab();
}
inline const std::string& TensorDescriptor::_internal_cmps_tab() const {
  return cmps_tab_.Get();
}
inline void TensorDescriptor::_internal_set_cmps_tab(const std::string& value) {
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorDescriptor::set_cmps_tab(std::string&& value) {
  
  cmps_tab_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.TensorDescriptor.cmps_tab)
}
inline void TensorDescriptor::set_cmps_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.TensorDescriptor.cmps_tab)
}
inline void TensorDescriptor::set_cmps_tab(const char* value,
    size_t size) {
  
  cmps_tab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.TensorDescriptor.cmps_tab)
}
inline std::string* TensorDescriptor::_internal_mutable_cmps_tab() {
  
  return cmps_tab_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorDescriptor::release_cmps_tab() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDescriptor.cmps_tab)
  return cmps_tab_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorDescriptor::set_allocated_cmps_tab(std::string* cmps_tab) {
  if (cmps_tab != nullptr) {
    
  } else {
    
  }
  cmps_tab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmps_tab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDescriptor.cmps_tab)
}

// int64 cmps_tab_offset = 21;
inline void TensorDescriptor::clear_cmps_tab_offset() {
  cmps_tab_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::_internal_cmps_tab_offset() const {
  return cmps_tab_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorDescriptor::cmps_tab_offset() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDescriptor.cmps_tab_offset)
  return _internal_cmps_tab_offset();
}
inline void TensorDescriptor::_internal_set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cmps_tab_offset_ = value;
}
inline void TensorDescriptor::set_cmps_tab_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cmps_tab_offset(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDescriptor.cmps_tab_offset)
}

// map<string, .ge.proto.AttrDef> attr = 5;
inline int TensorDescriptor::_internal_attr_size() const {
  return attr_.size();
}
inline int TensorDescriptor::attr_size() const {
  return _internal_attr_size();
}
inline void TensorDescriptor::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
TensorDescriptor::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
TensorDescriptor::attr() const {
  // @@protoc_insertion_point(field_map:ge.proto.TensorDescriptor.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
TensorDescriptor::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
TensorDescriptor::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:ge.proto.TensorDescriptor.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// TensorDef

// .ge.proto.TensorDescriptor desc = 1;
inline bool TensorDef::_internal_has_desc() const {
  return this != internal_default_instance() && desc_ != nullptr;
}
inline bool TensorDef::has_desc() const {
  return _internal_has_desc();
}
inline void TensorDef::clear_desc() {
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
}
inline const ::ge::proto::TensorDescriptor& TensorDef::_internal_desc() const {
  const ::ge::proto::TensorDescriptor* p = desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ge::proto::TensorDescriptor*>(
      &::ge::proto::_TensorDescriptor_default_instance_);
}
inline const ::ge::proto::TensorDescriptor& TensorDef::desc() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDef.desc)
  return _internal_desc();
}
inline void TensorDef::unsafe_arena_set_allocated_desc(
    ::ge::proto::TensorDescriptor* desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  desc_ = desc;
  if (desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ge.proto.TensorDef.desc)
}
inline ::ge::proto::TensorDescriptor* TensorDef::release_desc() {
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ge::proto::TensorDescriptor* TensorDef::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDef.desc)
  
  ::ge::proto::TensorDescriptor* temp = desc_;
  desc_ = nullptr;
  return temp;
}
inline ::ge::proto::TensorDescriptor* TensorDef::_internal_mutable_desc() {
  
  if (desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ge::proto::TensorDescriptor>(GetArena());
    desc_ = p;
  }
  return desc_;
}
inline ::ge::proto::TensorDescriptor* TensorDef::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDef.desc)
  return _internal_mutable_desc();
}
inline void TensorDef::set_allocated_desc(::ge::proto::TensorDescriptor* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete desc_;
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(desc);
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDef.desc)
}

// bytes data = 2;
inline void TensorDef::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorDef::data() const {
  // @@protoc_insertion_point(field_get:ge.proto.TensorDef.data)
  return _internal_data();
}
inline void TensorDef::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ge.proto.TensorDef.data)
}
inline std::string* TensorDef::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ge.proto.TensorDef.data)
  return _internal_mutable_data();
}
inline const std::string& TensorDef::_internal_data() const {
  return data_.Get();
}
inline void TensorDef::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorDef::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.TensorDef.data)
}
inline void TensorDef::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.TensorDef.data)
}
inline void TensorDef::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.TensorDef.data)
}
inline std::string* TensorDef::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorDef::release_data() {
  // @@protoc_insertion_point(field_release:ge.proto.TensorDef.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorDef::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.TensorDef.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpDef

// string name = 1;
inline void OpDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpDef::name() const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.name)
  return _internal_name();
}
inline void OpDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.name)
}
inline std::string* OpDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.name)
  return _internal_mutable_name();
}
inline const std::string& OpDef::_internal_name() const {
  return name_.Get();
}
inline void OpDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.OpDef.name)
}
inline void OpDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.name)
}
inline void OpDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.name)
}
inline std::string* OpDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpDef::release_name() {
  // @@protoc_insertion_point(field_release:ge.proto.OpDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.OpDef.name)
}

// string type = 2;
inline void OpDef::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpDef::type() const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.type)
  return _internal_type();
}
inline void OpDef::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.type)
}
inline std::string* OpDef::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.type)
  return _internal_mutable_type();
}
inline const std::string& OpDef::_internal_type() const {
  return type_.Get();
}
inline void OpDef::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpDef::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.OpDef.type)
}
inline void OpDef::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.type)
}
inline void OpDef::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.type)
}
inline std::string* OpDef::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpDef::release_type() {
  // @@protoc_insertion_point(field_release:ge.proto.OpDef.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDef::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.OpDef.type)
}

// repeated string input = 5;
inline int OpDef::_internal_input_size() const {
  return input_.size();
}
inline int OpDef::input_size() const {
  return _internal_input_size();
}
inline void OpDef::clear_input() {
  input_.Clear();
}
inline std::string* OpDef::add_input() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.OpDef.input)
  return _internal_add_input();
}
inline const std::string& OpDef::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& OpDef::input(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.input)
  return _internal_input(index);
}
inline std::string* OpDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.input)
  return input_.Mutable(index);
}
inline void OpDef::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.input)
  input_.Mutable(index)->assign(value);
}
inline void OpDef::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.input)
}
inline void OpDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.input)
}
inline std::string* OpDef::_internal_add_input() {
  return input_.Add();
}
inline void OpDef::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input)
}
inline void OpDef::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input)
}
inline void OpDef::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.OpDef.input)
}
inline void OpDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.OpDef.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::input() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.input)
  return &input_;
}

// map<string, .ge.proto.AttrDef> attr = 10;
inline int OpDef::_internal_attr_size() const {
  return attr_.size();
}
inline int OpDef::attr_size() const {
  return _internal_attr_size();
}
inline void OpDef::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
OpDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
OpDef::attr() const {
  // @@protoc_insertion_point(field_map:ge.proto.OpDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
OpDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
OpDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:ge.proto.OpDef.attr)
  return _internal_mutable_attr();
}

// bool has_out_attr = 20;
inline void OpDef::clear_has_out_attr() {
  has_out_attr_ = false;
}
inline bool OpDef::_internal_has_out_attr() const {
  return has_out_attr_;
}
inline bool OpDef::has_out_attr() const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.has_out_attr)
  return _internal_has_out_attr();
}
inline void OpDef::_internal_set_has_out_attr(bool value) {
  
  has_out_attr_ = value;
}
inline void OpDef::set_has_out_attr(bool value) {
  _internal_set_has_out_attr(value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.has_out_attr)
}

// int64 id = 21;
inline void OpDef::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::id() const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.id)
  return _internal_id();
}
inline void OpDef::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void OpDef::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.id)
}

// int64 stream_id = 22;
inline void OpDef::clear_stream_id() {
  stream_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::stream_id() const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.stream_id)
  return _internal_stream_id();
}
inline void OpDef::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stream_id_ = value;
}
inline void OpDef::set_stream_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.stream_id)
}

// repeated string input_name = 23;
inline int OpDef::_internal_input_name_size() const {
  return input_name_.size();
}
inline int OpDef::input_name_size() const {
  return _internal_input_name_size();
}
inline void OpDef::clear_input_name() {
  input_name_.Clear();
}
inline std::string* OpDef::add_input_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.OpDef.input_name)
  return _internal_add_input_name();
}
inline const std::string& OpDef::_internal_input_name(int index) const {
  return input_name_.Get(index);
}
inline const std::string& OpDef::input_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.input_name)
  return _internal_input_name(index);
}
inline std::string* OpDef::mutable_input_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.input_name)
  return input_name_.Mutable(index);
}
inline void OpDef::set_input_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.input_name)
  input_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_input_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.input_name)
  input_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_input_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.input_name)
}
inline void OpDef::set_input_name(int index, const char* value, size_t size) {
  input_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.input_name)
}
inline std::string* OpDef::_internal_add_input_name() {
  return input_name_.Add();
}
inline void OpDef::add_input_name(const std::string& value) {
  input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input_name)
}
inline void OpDef::add_input_name(std::string&& value) {
  input_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input_name)
}
inline void OpDef::add_input_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.OpDef.input_name)
}
inline void OpDef::add_input_name(const char* value, size_t size) {
  input_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.OpDef.input_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::input_name() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.input_name)
  return input_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_input_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.input_name)
  return &input_name_;
}

// repeated string src_name = 24;
inline int OpDef::_internal_src_name_size() const {
  return src_name_.size();
}
inline int OpDef::src_name_size() const {
  return _internal_src_name_size();
}
inline void OpDef::clear_src_name() {
  src_name_.Clear();
}
inline std::string* OpDef::add_src_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.OpDef.src_name)
  return _internal_add_src_name();
}
inline const std::string& OpDef::_internal_src_name(int index) const {
  return src_name_.Get(index);
}
inline const std::string& OpDef::src_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.src_name)
  return _internal_src_name(index);
}
inline std::string* OpDef::mutable_src_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.src_name)
  return src_name_.Mutable(index);
}
inline void OpDef::set_src_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.src_name)
  src_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_src_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.src_name)
  src_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_src_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.src_name)
}
inline void OpDef::set_src_name(int index, const char* value, size_t size) {
  src_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.src_name)
}
inline std::string* OpDef::_internal_add_src_name() {
  return src_name_.Add();
}
inline void OpDef::add_src_name(const std::string& value) {
  src_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.src_name)
}
inline void OpDef::add_src_name(std::string&& value) {
  src_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.src_name)
}
inline void OpDef::add_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  src_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.OpDef.src_name)
}
inline void OpDef::add_src_name(const char* value, size_t size) {
  src_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.OpDef.src_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::src_name() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.src_name)
  return src_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_src_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.src_name)
  return &src_name_;
}

// repeated int64 src_index = 25;
inline int OpDef::_internal_src_index_size() const {
  return src_index_.size();
}
inline int OpDef::src_index_size() const {
  return _internal_src_index_size();
}
inline void OpDef::clear_src_index() {
  src_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_src_index(int index) const {
  return src_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::src_index(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.src_index)
  return _internal_src_index(index);
}
inline void OpDef::set_src_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  src_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.src_index)
}
inline void OpDef::_internal_add_src_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  src_index_.Add(value);
}
inline void OpDef::add_src_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_src_index(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.src_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_src_index() const {
  return src_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::src_index() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.src_index)
  return _internal_src_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_src_index() {
  return &src_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_src_index() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.src_index)
  return _internal_mutable_src_index();
}

// repeated string dst_name = 26;
inline int OpDef::_internal_dst_name_size() const {
  return dst_name_.size();
}
inline int OpDef::dst_name_size() const {
  return _internal_dst_name_size();
}
inline void OpDef::clear_dst_name() {
  dst_name_.Clear();
}
inline std::string* OpDef::add_dst_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.OpDef.dst_name)
  return _internal_add_dst_name();
}
inline const std::string& OpDef::_internal_dst_name(int index) const {
  return dst_name_.Get(index);
}
inline const std::string& OpDef::dst_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.dst_name)
  return _internal_dst_name(index);
}
inline std::string* OpDef::mutable_dst_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.dst_name)
  return dst_name_.Mutable(index);
}
inline void OpDef::set_dst_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.dst_name)
  dst_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_dst_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.dst_name)
  dst_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_dst_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dst_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.dst_name)
}
inline void OpDef::set_dst_name(int index, const char* value, size_t size) {
  dst_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.dst_name)
}
inline std::string* OpDef::_internal_add_dst_name() {
  return dst_name_.Add();
}
inline void OpDef::add_dst_name(const std::string& value) {
  dst_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.dst_name)
}
inline void OpDef::add_dst_name(std::string&& value) {
  dst_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.dst_name)
}
inline void OpDef::add_dst_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dst_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.OpDef.dst_name)
}
inline void OpDef::add_dst_name(const char* value, size_t size) {
  dst_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.OpDef.dst_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::dst_name() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.dst_name)
  return dst_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_dst_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.dst_name)
  return &dst_name_;
}

// repeated int64 dst_index = 27;
inline int OpDef::_internal_dst_index_size() const {
  return dst_index_.size();
}
inline int OpDef::dst_index_size() const {
  return _internal_dst_index_size();
}
inline void OpDef::clear_dst_index() {
  dst_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_dst_index(int index) const {
  return dst_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::dst_index(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.dst_index)
  return _internal_dst_index(index);
}
inline void OpDef::set_dst_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dst_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.dst_index)
}
inline void OpDef::_internal_add_dst_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dst_index_.Add(value);
}
inline void OpDef::add_dst_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dst_index(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.dst_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_dst_index() const {
  return dst_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::dst_index() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.dst_index)
  return _internal_dst_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_dst_index() {
  return &dst_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_dst_index() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.dst_index)
  return _internal_mutable_dst_index();
}

// repeated int64 input_i = 28;
inline int OpDef::_internal_input_i_size() const {
  return input_i_.size();
}
inline int OpDef::input_i_size() const {
  return _internal_input_i_size();
}
inline void OpDef::clear_input_i() {
  input_i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_input_i(int index) const {
  return input_i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::input_i(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.input_i)
  return _internal_input_i(index);
}
inline void OpDef::set_input_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  input_i_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.input_i)
}
inline void OpDef::_internal_add_input_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  input_i_.Add(value);
}
inline void OpDef::add_input_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_input_i(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input_i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_input_i() const {
  return input_i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::input_i() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.input_i)
  return _internal_input_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_input_i() {
  return &input_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_input_i() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.input_i)
  return _internal_mutable_input_i();
}

// repeated int64 output_i = 29;
inline int OpDef::_internal_output_i_size() const {
  return output_i_.size();
}
inline int OpDef::output_i_size() const {
  return _internal_output_i_size();
}
inline void OpDef::clear_output_i() {
  output_i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_output_i(int index) const {
  return output_i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::output_i(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.output_i)
  return _internal_output_i(index);
}
inline void OpDef::set_output_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  output_i_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.output_i)
}
inline void OpDef::_internal_add_output_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  output_i_.Add(value);
}
inline void OpDef::add_output_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_output_i(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.output_i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_output_i() const {
  return output_i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::output_i() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.output_i)
  return _internal_output_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_output_i() {
  return &output_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_output_i() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.output_i)
  return _internal_mutable_output_i();
}

// repeated int64 workspace = 30;
inline int OpDef::_internal_workspace_size() const {
  return workspace_.size();
}
inline int OpDef::workspace_size() const {
  return _internal_workspace_size();
}
inline void OpDef::clear_workspace() {
  workspace_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_workspace(int index) const {
  return workspace_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::workspace(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.workspace)
  return _internal_workspace(index);
}
inline void OpDef::set_workspace(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.workspace)
}
inline void OpDef::_internal_add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_.Add(value);
}
inline void OpDef::add_workspace(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_workspace(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.workspace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_workspace() const {
  return workspace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::workspace() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.workspace)
  return _internal_workspace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_workspace() {
  return &workspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_workspace() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.workspace)
  return _internal_mutable_workspace();
}

// repeated int64 workspace_bytes = 31;
inline int OpDef::_internal_workspace_bytes_size() const {
  return workspace_bytes_.size();
}
inline int OpDef::workspace_bytes_size() const {
  return _internal_workspace_bytes_size();
}
inline void OpDef::clear_workspace_bytes() {
  workspace_bytes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::_internal_workspace_bytes(int index) const {
  return workspace_bytes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDef::workspace_bytes(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.workspace_bytes)
  return _internal_workspace_bytes(index);
}
inline void OpDef::set_workspace_bytes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_bytes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.workspace_bytes)
}
inline void OpDef::_internal_add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  workspace_bytes_.Add(value);
}
inline void OpDef::add_workspace_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_workspace_bytes(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.workspace_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::_internal_workspace_bytes() const {
  return workspace_bytes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDef::workspace_bytes() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.workspace_bytes)
  return _internal_workspace_bytes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::_internal_mutable_workspace_bytes() {
  return &workspace_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDef::mutable_workspace_bytes() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.workspace_bytes)
  return _internal_mutable_workspace_bytes();
}

// repeated bool is_input_const = 32;
inline int OpDef::_internal_is_input_const_size() const {
  return is_input_const_.size();
}
inline int OpDef::is_input_const_size() const {
  return _internal_is_input_const_size();
}
inline void OpDef::clear_is_input_const() {
  is_input_const_.Clear();
}
inline bool OpDef::_internal_is_input_const(int index) const {
  return is_input_const_.Get(index);
}
inline bool OpDef::is_input_const(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.is_input_const)
  return _internal_is_input_const(index);
}
inline void OpDef::set_is_input_const(int index, bool value) {
  is_input_const_.Set(index, value);
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.is_input_const)
}
inline void OpDef::_internal_add_is_input_const(bool value) {
  is_input_const_.Add(value);
}
inline void OpDef::add_is_input_const(bool value) {
  _internal_add_is_input_const(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.is_input_const)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDef::_internal_is_input_const() const {
  return is_input_const_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDef::is_input_const() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.is_input_const)
  return _internal_is_input_const();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDef::_internal_mutable_is_input_const() {
  return &is_input_const_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDef::mutable_is_input_const() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.is_input_const)
  return _internal_mutable_is_input_const();
}

// repeated .ge.proto.TensorDescriptor input_desc = 33;
inline int OpDef::_internal_input_desc_size() const {
  return input_desc_.size();
}
inline int OpDef::input_desc_size() const {
  return _internal_input_desc_size();
}
inline void OpDef::clear_input_desc() {
  input_desc_.Clear();
}
inline ::ge::proto::TensorDescriptor* OpDef::mutable_input_desc(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.input_desc)
  return input_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
OpDef::mutable_input_desc() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.input_desc)
  return &input_desc_;
}
inline const ::ge::proto::TensorDescriptor& OpDef::_internal_input_desc(int index) const {
  return input_desc_.Get(index);
}
inline const ::ge::proto::TensorDescriptor& OpDef::input_desc(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.input_desc)
  return _internal_input_desc(index);
}
inline ::ge::proto::TensorDescriptor* OpDef::_internal_add_input_desc() {
  return input_desc_.Add();
}
inline ::ge::proto::TensorDescriptor* OpDef::add_input_desc() {
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.input_desc)
  return _internal_add_input_desc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
OpDef::input_desc() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.input_desc)
  return input_desc_;
}

// repeated .ge.proto.TensorDescriptor output_desc = 34;
inline int OpDef::_internal_output_desc_size() const {
  return output_desc_.size();
}
inline int OpDef::output_desc_size() const {
  return _internal_output_desc_size();
}
inline void OpDef::clear_output_desc() {
  output_desc_.Clear();
}
inline ::ge::proto::TensorDescriptor* OpDef::mutable_output_desc(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.output_desc)
  return output_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >*
OpDef::mutable_output_desc() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.output_desc)
  return &output_desc_;
}
inline const ::ge::proto::TensorDescriptor& OpDef::_internal_output_desc(int index) const {
  return output_desc_.Get(index);
}
inline const ::ge::proto::TensorDescriptor& OpDef::output_desc(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.output_desc)
  return _internal_output_desc(index);
}
inline ::ge::proto::TensorDescriptor* OpDef::_internal_add_output_desc() {
  return output_desc_.Add();
}
inline ::ge::proto::TensorDescriptor* OpDef::add_output_desc() {
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.output_desc)
  return _internal_add_output_desc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::TensorDescriptor >&
OpDef::output_desc() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.output_desc)
  return output_desc_;
}

// repeated string subgraph_name = 35;
inline int OpDef::_internal_subgraph_name_size() const {
  return subgraph_name_.size();
}
inline int OpDef::subgraph_name_size() const {
  return _internal_subgraph_name_size();
}
inline void OpDef::clear_subgraph_name() {
  subgraph_name_.Clear();
}
inline std::string* OpDef::add_subgraph_name() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.OpDef.subgraph_name)
  return _internal_add_subgraph_name();
}
inline const std::string& OpDef::_internal_subgraph_name(int index) const {
  return subgraph_name_.Get(index);
}
inline const std::string& OpDef::subgraph_name(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.OpDef.subgraph_name)
  return _internal_subgraph_name(index);
}
inline std::string* OpDef::mutable_subgraph_name(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.OpDef.subgraph_name)
  return subgraph_name_.Mutable(index);
}
inline void OpDef::set_subgraph_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.subgraph_name)
  subgraph_name_.Mutable(index)->assign(value);
}
inline void OpDef::set_subgraph_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.OpDef.subgraph_name)
  subgraph_name_.Mutable(index)->assign(std::move(value));
}
inline void OpDef::set_subgraph_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subgraph_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.OpDef.subgraph_name)
}
inline void OpDef::set_subgraph_name(int index, const char* value, size_t size) {
  subgraph_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.OpDef.subgraph_name)
}
inline std::string* OpDef::_internal_add_subgraph_name() {
  return subgraph_name_.Add();
}
inline void OpDef::add_subgraph_name(const std::string& value) {
  subgraph_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.subgraph_name)
}
inline void OpDef::add_subgraph_name(std::string&& value) {
  subgraph_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.OpDef.subgraph_name)
}
inline void OpDef::add_subgraph_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subgraph_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.OpDef.subgraph_name)
}
inline void OpDef::add_subgraph_name(const char* value, size_t size) {
  subgraph_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.OpDef.subgraph_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::subgraph_name() const {
  // @@protoc_insertion_point(field_list:ge.proto.OpDef.subgraph_name)
  return subgraph_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_subgraph_name() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.OpDef.subgraph_name)
  return &subgraph_name_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GraphDef

// string name = 1;
inline void GraphDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDef::name() const {
  // @@protoc_insertion_point(field_get:ge.proto.GraphDef.name)
  return _internal_name();
}
inline void GraphDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.proto.GraphDef.name)
}
inline std::string* GraphDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.proto.GraphDef.name)
  return _internal_mutable_name();
}
inline const std::string& GraphDef::_internal_name() const {
  return name_.Get();
}
inline void GraphDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.GraphDef.name)
}
inline void GraphDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.GraphDef.name)
}
inline void GraphDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.GraphDef.name)
}
inline std::string* GraphDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDef::release_name() {
  // @@protoc_insertion_point(field_release:ge.proto.GraphDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.GraphDef.name)
}

// repeated string input = 4;
inline int GraphDef::_internal_input_size() const {
  return input_.size();
}
inline int GraphDef::input_size() const {
  return _internal_input_size();
}
inline void GraphDef::clear_input() {
  input_.Clear();
}
inline std::string* GraphDef::add_input() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.GraphDef.input)
  return _internal_add_input();
}
inline const std::string& GraphDef::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& GraphDef::input(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.GraphDef.input)
  return _internal_input(index);
}
inline std::string* GraphDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.GraphDef.input)
  return input_.Mutable(index);
}
inline void GraphDef::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.GraphDef.input)
  input_.Mutable(index)->assign(value);
}
inline void GraphDef::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.GraphDef.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void GraphDef::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.GraphDef.input)
}
inline void GraphDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.GraphDef.input)
}
inline std::string* GraphDef::_internal_add_input() {
  return input_.Add();
}
inline void GraphDef::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.GraphDef.input)
}
inline void GraphDef::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.GraphDef.input)
}
inline void GraphDef::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.GraphDef.input)
}
inline void GraphDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.GraphDef.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphDef::input() const {
  // @@protoc_insertion_point(field_list:ge.proto.GraphDef.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.GraphDef.input)
  return &input_;
}

// repeated string output = 5;
inline int GraphDef::_internal_output_size() const {
  return output_.size();
}
inline int GraphDef::output_size() const {
  return _internal_output_size();
}
inline void GraphDef::clear_output() {
  output_.Clear();
}
inline std::string* GraphDef::add_output() {
  // @@protoc_insertion_point(field_add_mutable:ge.proto.GraphDef.output)
  return _internal_add_output();
}
inline const std::string& GraphDef::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& GraphDef::output(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.GraphDef.output)
  return _internal_output(index);
}
inline std::string* GraphDef::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.GraphDef.output)
  return output_.Mutable(index);
}
inline void GraphDef::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ge.proto.GraphDef.output)
  output_.Mutable(index)->assign(value);
}
inline void GraphDef::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ge.proto.GraphDef.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void GraphDef::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ge.proto.GraphDef.output)
}
inline void GraphDef::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ge.proto.GraphDef.output)
}
inline std::string* GraphDef::_internal_add_output() {
  return output_.Add();
}
inline void GraphDef::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ge.proto.GraphDef.output)
}
inline void GraphDef::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ge.proto.GraphDef.output)
}
inline void GraphDef::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ge.proto.GraphDef.output)
}
inline void GraphDef::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ge.proto.GraphDef.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphDef::output() const {
  // @@protoc_insertion_point(field_list:ge.proto.GraphDef.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphDef::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.GraphDef.output)
  return &output_;
}

// repeated .ge.proto.OpDef op = 6;
inline int GraphDef::_internal_op_size() const {
  return op_.size();
}
inline int GraphDef::op_size() const {
  return _internal_op_size();
}
inline void GraphDef::clear_op() {
  op_.Clear();
}
inline ::ge::proto::OpDef* GraphDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.GraphDef.op)
  return op_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::OpDef >*
GraphDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.GraphDef.op)
  return &op_;
}
inline const ::ge::proto::OpDef& GraphDef::_internal_op(int index) const {
  return op_.Get(index);
}
inline const ::ge::proto::OpDef& GraphDef::op(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.GraphDef.op)
  return _internal_op(index);
}
inline ::ge::proto::OpDef* GraphDef::_internal_add_op() {
  return op_.Add();
}
inline ::ge::proto::OpDef* GraphDef::add_op() {
  // @@protoc_insertion_point(field_add:ge.proto.GraphDef.op)
  return _internal_add_op();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::OpDef >&
GraphDef::op() const {
  // @@protoc_insertion_point(field_list:ge.proto.GraphDef.op)
  return op_;
}

// map<string, .ge.proto.AttrDef> attr = 11;
inline int GraphDef::_internal_attr_size() const {
  return attr_.size();
}
inline int GraphDef::attr_size() const {
  return _internal_attr_size();
}
inline void GraphDef::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
GraphDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
GraphDef::attr() const {
  // @@protoc_insertion_point(field_map:ge.proto.GraphDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
GraphDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
GraphDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:ge.proto.GraphDef.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModelDef

// string name = 1;
inline void ModelDef::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelDef::name() const {
  // @@protoc_insertion_point(field_get:ge.proto.ModelDef.name)
  return _internal_name();
}
inline void ModelDef::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ge.proto.ModelDef.name)
}
inline std::string* ModelDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ge.proto.ModelDef.name)
  return _internal_mutable_name();
}
inline const std::string& ModelDef::_internal_name() const {
  return name_.Get();
}
inline void ModelDef::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelDef::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.ModelDef.name)
}
inline void ModelDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.ModelDef.name)
}
inline void ModelDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.ModelDef.name)
}
inline std::string* ModelDef::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelDef::release_name() {
  // @@protoc_insertion_point(field_release:ge.proto.ModelDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.ModelDef.name)
}

// uint32 version = 2;
inline void ModelDef::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDef::version() const {
  // @@protoc_insertion_point(field_get:ge.proto.ModelDef.version)
  return _internal_version();
}
inline void ModelDef::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void ModelDef::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ge.proto.ModelDef.version)
}

// string custom_version = 3;
inline void ModelDef::clear_custom_version() {
  custom_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelDef::custom_version() const {
  // @@protoc_insertion_point(field_get:ge.proto.ModelDef.custom_version)
  return _internal_custom_version();
}
inline void ModelDef::set_custom_version(const std::string& value) {
  _internal_set_custom_version(value);
  // @@protoc_insertion_point(field_set:ge.proto.ModelDef.custom_version)
}
inline std::string* ModelDef::mutable_custom_version() {
  // @@protoc_insertion_point(field_mutable:ge.proto.ModelDef.custom_version)
  return _internal_mutable_custom_version();
}
inline const std::string& ModelDef::_internal_custom_version() const {
  return custom_version_.Get();
}
inline void ModelDef::_internal_set_custom_version(const std::string& value) {
  
  custom_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelDef::set_custom_version(std::string&& value) {
  
  custom_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ge.proto.ModelDef.custom_version)
}
inline void ModelDef::set_custom_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ge.proto.ModelDef.custom_version)
}
inline void ModelDef::set_custom_version(const char* value,
    size_t size) {
  
  custom_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ge.proto.ModelDef.custom_version)
}
inline std::string* ModelDef::_internal_mutable_custom_version() {
  
  return custom_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelDef::release_custom_version() {
  // @@protoc_insertion_point(field_release:ge.proto.ModelDef.custom_version)
  return custom_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDef::set_allocated_custom_version(std::string* custom_version) {
  if (custom_version != nullptr) {
    
  } else {
    
  }
  custom_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ge.proto.ModelDef.custom_version)
}

// repeated .ge.proto.GraphDef graph = 7;
inline int ModelDef::_internal_graph_size() const {
  return graph_.size();
}
inline int ModelDef::graph_size() const {
  return _internal_graph_size();
}
inline void ModelDef::clear_graph() {
  graph_.Clear();
}
inline ::ge::proto::GraphDef* ModelDef::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:ge.proto.ModelDef.graph)
  return graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >*
ModelDef::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:ge.proto.ModelDef.graph)
  return &graph_;
}
inline const ::ge::proto::GraphDef& ModelDef::_internal_graph(int index) const {
  return graph_.Get(index);
}
inline const ::ge::proto::GraphDef& ModelDef::graph(int index) const {
  // @@protoc_insertion_point(field_get:ge.proto.ModelDef.graph)
  return _internal_graph(index);
}
inline ::ge::proto::GraphDef* ModelDef::_internal_add_graph() {
  return graph_.Add();
}
inline ::ge::proto::GraphDef* ModelDef::add_graph() {
  // @@protoc_insertion_point(field_add:ge.proto.ModelDef.graph)
  return _internal_add_graph();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ge::proto::GraphDef >&
ModelDef::graph() const {
  // @@protoc_insertion_point(field_list:ge.proto.ModelDef.graph)
  return graph_;
}

// map<string, .ge.proto.AttrDef> attr = 11;
inline int ModelDef::_internal_attr_size() const {
  return attr_.size();
}
inline int ModelDef::attr_size() const {
  return _internal_attr_size();
}
inline void ModelDef::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
ModelDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >&
ModelDef::attr() const {
  // @@protoc_insertion_point(field_map:ge.proto.ModelDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
ModelDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ge::proto::AttrDef >*
ModelDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:ge.proto.ModelDef.attr)
  return _internal_mutable_attr();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ge::proto::AttrDef_ListValue_ListValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ge::proto::AttrDef_ListValue_ListValueType>() {
  return ::ge::proto::AttrDef_ListValue_ListValueType_descriptor();
}
template <> struct is_proto_enum< ::ge::proto::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ge::proto::DataType>() {
  return ::ge::proto::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ge_5fir_2eproto
